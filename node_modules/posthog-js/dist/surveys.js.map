{"version":3,"file":"surveys.js","sources":["../node_modules/.pnpm/preact@10.19.3/node_modules/preact/dist/preact.module.js","../node_modules/.pnpm/preact@10.19.3/node_modules/preact/hooks/dist/hooks.module.js","../src/posthog-surveys-types.ts","../src/utils/globals.ts","../src/types.ts","../src/utils/type-utils.ts","../src/utils/logger.ts","../src/utils/index.ts","../src/utils/survey-utils.ts","../src/uuidv7.ts","../src/extensions/utils/stylesheet-loader.ts","../src/utils/regex-utils.ts","../src/utils/user-agent-utils.ts","../src/extensions/surveys/surveys-extension-utils.tsx","../src/extensions/surveys-widget.ts","../src/extensions/surveys/icons.tsx","../src/extensions/surveys/components/PostHogLogo.tsx","../src/extensions/surveys/components/BottomSection.tsx","../src/extensions/surveys/components/QuestionHeader.tsx","../src/extensions/surveys/components/ConfirmationMessage.tsx","../src/extensions/surveys/components/QuestionTypes.tsx","../src/extensions/surveys.tsx","../src/entrypoints/surveys.ts"],"sourcesContent":["var n,l,u,t,i,o,r,f,e,c={},s=[],a=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,h=Array.isArray;function v(n,l){for(var u in l)n[u]=l[u];return n}function p(n){var l=n.parentNode;l&&l.removeChild(n)}function y(l,u,t){var i,o,r,f={};for(r in u)\"key\"==r?i=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),\"function\"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return d(l,f,i,o,null)}function d(n,t,i,o,r){var f={type:n,props:t,key:i,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==r?++u:r,__i:-1,__u:0};return null==r&&null!=l.vnode&&l.vnode(f),f}function _(){return{current:null}}function g(n){return n.children}function b(n,l){this.props=n,this.context=l}function m(n,l){if(null==l)return n.__?m(n.__,n.__i+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?m(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function w(n){(!n.__d&&(n.__d=!0)&&i.push(n)&&!x.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||r)(x)}function x(){var n,u,t,o,r,e,c,s,a;for(i.sort(f);n=i.shift();)n.__d&&(u=i.length,o=void 0,e=(r=(t=n).__v).__e,s=[],a=[],(c=t.__P)&&((o=v({},r)).__v=r.__v+1,l.vnode&&l.vnode(o),L(c,o,r,t.__n,void 0!==c.ownerSVGElement,32&r.__u?[e]:null,s,null==e?m(r):e,!!(32&r.__u),a),o.__.__k[o.__i]=o,M(s,o,a),o.__e!=e&&k(o)),i.length>u&&i.sort(f));x.__r=0}function C(n,l,u,t,i,o,r,f,e,a,h){var v,p,y,d,_,g=t&&t.__k||s,b=l.length;for(u.__d=e,P(u,l,g),e=u.__d,v=0;v<b;v++)null!=(y=u.__k[v])&&\"boolean\"!=typeof y&&\"function\"!=typeof y&&(p=-1===y.__i?c:g[y.__i]||c,y.__i=v,L(n,y,p,i,o,r,f,e,a,h),d=y.__e,y.ref&&p.ref!=y.ref&&(p.ref&&z(p.ref,null,y),h.push(y.ref,y.__c||d,y)),null==_&&null!=d&&(_=d),65536&y.__u||p.__k===y.__k?e=S(y,e,n):\"function\"==typeof y.type&&void 0!==y.__d?e=y.__d:d&&(e=d.nextSibling),y.__d=void 0,y.__u&=-196609);u.__d=e,u.__e=_}function P(n,l,u){var t,i,o,r,f,e=l.length,c=u.length,s=c,a=0;for(n.__k=[],t=0;t<e;t++)null!=(i=n.__k[t]=null==(i=l[t])||\"boolean\"==typeof i||\"function\"==typeof i?null:\"string\"==typeof i||\"number\"==typeof i||\"bigint\"==typeof i||i.constructor==String?d(null,i,null,null,i):h(i)?d(g,{children:i},null,null,null):void 0===i.constructor&&i.__b>0?d(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i)?(i.__=n,i.__b=n.__b+1,f=H(i,u,r=t+a,s),i.__i=f,o=null,-1!==f&&(s--,(o=u[f])&&(o.__u|=131072)),null==o||null===o.__v?(-1==f&&a--,\"function\"!=typeof i.type&&(i.__u|=65536)):f!==r&&(f===r+1?a++:f>r?s>e-r?a+=f-r:a--:a=f<r&&f==r-1?f-r:0,f!==t+a&&(i.__u|=65536))):(o=u[t])&&null==o.key&&o.__e&&(o.__e==n.__d&&(n.__d=m(o)),N(o,o,!1),u[t]=null,s--);if(s)for(t=0;t<c;t++)null!=(o=u[t])&&0==(131072&o.__u)&&(o.__e==n.__d&&(n.__d=m(o)),N(o,o))}function S(n,l,u){var t,i;if(\"function\"==typeof n.type){for(t=n.__k,i=0;t&&i<t.length;i++)t[i]&&(t[i].__=n,l=S(t[i],l,u));return l}return n.__e!=l&&(u.insertBefore(n.__e,l||null),l=n.__e),l&&l.nextSibling}function $(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(h(n)?n.some(function(n){$(n,l)}):l.push(n)),l}function H(n,l,u,t){var i=n.key,o=n.type,r=u-1,f=u+1,e=l[u];if(null===e||e&&i==e.key&&o===e.type)return u;if(t>(null!=e&&0==(131072&e.__u)?1:0))for(;r>=0||f<l.length;){if(r>=0){if((e=l[r])&&0==(131072&e.__u)&&i==e.key&&o===e.type)return r;r--}if(f<l.length){if((e=l[f])&&0==(131072&e.__u)&&i==e.key&&o===e.type)return f;f++}}return-1}function I(n,l,u){\"-\"===l[0]?n.setProperty(l,null==u?\"\":u):n[l]=null==u?\"\":\"number\"!=typeof u||a.test(l)?u:u+\"px\"}function T(n,l,u,t,i){var o;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof t&&(n.style.cssText=t=\"\"),t)for(l in t)u&&l in u||I(n.style,l,\"\");if(u)for(l in u)t&&u[l]===t[l]||I(n.style,l,u[l])}else if(\"o\"===l[0]&&\"n\"===l[1])o=l!==(l=l.replace(/(PointerCapture)$|Capture$/,\"$1\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?t?u.u=t.u:(u.u=Date.now(),n.addEventListener(l,o?D:A,o)):n.removeEventListener(l,o?D:A,o);else{if(i)l=l.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(\"width\"!==l&&\"height\"!==l&&\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&\"rowSpan\"!==l&&\"colSpan\"!==l&&\"role\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null==u||!1===u&&\"-\"!==l[4]?n.removeAttribute(l):n.setAttribute(l,u))}}function A(n){var u=this.l[n.type+!1];if(n.t){if(n.t<=u.u)return}else n.t=Date.now();return u(l.event?l.event(n):n)}function D(n){return this.l[n.type+!0](l.event?l.event(n):n)}function L(n,u,t,i,o,r,f,e,c,s){var a,p,y,d,_,m,k,w,x,P,S,$,H,I,T,A=u.type;if(void 0!==u.constructor)return null;128&t.__u&&(c=!!(32&t.__u),r=[e=u.__e=t.__e]),(a=l.__b)&&a(u);n:if(\"function\"==typeof A)try{if(w=u.props,x=(a=A.contextType)&&i[a.__c],P=a?x?x.props.value:a.__:i,t.__c?k=(p=u.__c=t.__c).__=p.__E:(\"prototype\"in A&&A.prototype.render?u.__c=p=new A(w,P):(u.__c=p=new b(w,P),p.constructor=A,p.render=O),x&&x.sub(p),p.props=w,p.state||(p.state={}),p.context=P,p.__n=i,y=p.__d=!0,p.__h=[],p._sb=[]),null==p.__s&&(p.__s=p.state),null!=A.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=v({},p.__s)),v(p.__s,A.getDerivedStateFromProps(w,p.__s))),d=p.props,_=p.state,p.__v=u,y)null==A.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==A.getDerivedStateFromProps&&w!==d&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(w,P),!p.__e&&(null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(w,p.__s,P)||u.__v===t.__v)){for(u.__v!==t.__v&&(p.props=w,p.state=p.__s,p.__d=!1),u.__e=t.__e,u.__k=t.__k,u.__k.forEach(function(n){n&&(n.__=u)}),S=0;S<p._sb.length;S++)p.__h.push(p._sb[S]);p._sb=[],p.__h.length&&f.push(p);break n}null!=p.componentWillUpdate&&p.componentWillUpdate(w,p.__s,P),null!=p.componentDidUpdate&&p.__h.push(function(){p.componentDidUpdate(d,_,m)})}if(p.context=P,p.props=w,p.__P=n,p.__e=!1,$=l.__r,H=0,\"prototype\"in A&&A.prototype.render){for(p.state=p.__s,p.__d=!1,$&&$(u),a=p.render(p.props,p.state,p.context),I=0;I<p._sb.length;I++)p.__h.push(p._sb[I]);p._sb=[]}else do{p.__d=!1,$&&$(u),a=p.render(p.props,p.state,p.context),p.state=p.__s}while(p.__d&&++H<25);p.state=p.__s,null!=p.getChildContext&&(i=v(v({},i),p.getChildContext())),y||null==p.getSnapshotBeforeUpdate||(m=p.getSnapshotBeforeUpdate(d,_)),C(n,h(T=null!=a&&a.type===g&&null==a.key?a.props.children:a)?T:[T],u,t,i,o,r,f,e,c,s),p.base=u.__e,u.__u&=-161,p.__h.length&&f.push(p),k&&(p.__E=p.__=null)}catch(n){u.__v=null,c||null!=r?(u.__e=e,u.__u|=c?160:32,r[r.indexOf(e)]=null):(u.__e=t.__e,u.__k=t.__k),l.__e(n,u,t)}else null==r&&u.__v===t.__v?(u.__k=t.__k,u.__e=t.__e):u.__e=j(t.__e,u,t,i,o,r,f,c,s);(a=l.diffed)&&a(u)}function M(n,u,t){u.__d=void 0;for(var i=0;i<t.length;i++)z(t[i],t[++i],t[++i]);l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function j(l,u,t,i,o,r,f,e,s){var a,v,y,d,_,g,b,k=t.props,w=u.props,x=u.type;if(\"svg\"===x&&(o=!0),null!=r)for(a=0;a<r.length;a++)if((_=r[a])&&\"setAttribute\"in _==!!x&&(x?_.localName===x:3===_.nodeType)){l=_,r[a]=null;break}if(null==l){if(null===x)return document.createTextNode(w);l=o?document.createElementNS(\"http://www.w3.org/2000/svg\",x):document.createElement(x,w.is&&w),r=null,e=!1}if(null===x)k===w||e&&l.data===w||(l.data=w);else{if(r=r&&n.call(l.childNodes),k=t.props||c,!e&&null!=r)for(k={},a=0;a<l.attributes.length;a++)k[(_=l.attributes[a]).name]=_.value;for(a in k)_=k[a],\"children\"==a||(\"dangerouslySetInnerHTML\"==a?y=_:\"key\"===a||a in w||T(l,a,null,_,o));for(a in w)_=w[a],\"children\"==a?d=_:\"dangerouslySetInnerHTML\"==a?v=_:\"value\"==a?g=_:\"checked\"==a?b=_:\"key\"===a||e&&\"function\"!=typeof _||k[a]===_||T(l,a,_,k[a],o);if(v)e||y&&(v.__html===y.__html||v.__html===l.innerHTML)||(l.innerHTML=v.__html),u.__k=[];else if(y&&(l.innerHTML=\"\"),C(l,h(d)?d:[d],u,t,i,o&&\"foreignObject\"!==x,r,f,r?r[0]:t.__k&&m(t,0),e,s),null!=r)for(a=r.length;a--;)null!=r[a]&&p(r[a]);e||(a=\"value\",void 0!==g&&(g!==l[a]||\"progress\"===x&&!g||\"option\"===x&&g!==k[a])&&T(l,a,g,k[a],!1),a=\"checked\",void 0!==b&&b!==l[a]&&T(l,a,b,k[a],!1))}return l}function z(n,u,t){try{\"function\"==typeof n?n(u):n.current=u}catch(n){l.__e(n,t)}}function N(n,u,t){var i,o;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||z(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(n){l.__e(n,u)}i.base=i.__P=null,n.__c=void 0}if(i=n.__k)for(o=0;o<i.length;o++)i[o]&&N(i[o],u,t||\"function\"!=typeof n.type);t||null==n.__e||p(n.__e),n.__=n.__e=n.__d=void 0}function O(n,l,u){return this.constructor(n,u)}function q(u,t,i){var o,r,f,e;l.__&&l.__(u,t),r=(o=\"function\"==typeof i)?null:i&&i.__k||t.__k,f=[],e=[],L(t,u=(!o&&i||t).__k=y(g,null,[u]),r||c,c,void 0!==t.ownerSVGElement,!o&&i?[i]:r?null:t.firstChild?n.call(t.childNodes):null,f,!o&&i?i:r?r.__e:t.firstChild,o,e),M(f,u,e)}function B(n,l){q(n,l,B)}function E(l,u,t){var i,o,r,f,e=v({},l.props);for(r in l.type&&l.type.defaultProps&&(f=l.type.defaultProps),u)\"key\"==r?i=u[r]:\"ref\"==r?o=u[r]:e[r]=void 0===u[r]&&void 0!==f?f[r]:u[r];return arguments.length>2&&(e.children=arguments.length>3?n.call(arguments,2):t),d(l.type,e,i||l.key,o||l.ref,null)}function F(n,l){var u={__c:l=\"__cC\"+e++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,t;return this.getChildContext||(u=[],(t={})[l]=this,this.getChildContext=function(){return t},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(function(n){n.__e=!0,w(n)})},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=s.slice,l={__e:function(n,l,u,t){for(var i,o,r;l=l.__;)if((i=l.__c)&&!i.__)try{if((o=i.constructor)&&null!=o.getDerivedStateFromError&&(i.setState(o.getDerivedStateFromError(n)),r=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(n,t||{}),r=i.__d),r)return i.__E=i}catch(l){n=l}throw n}},u=0,t=function(n){return null!=n&&null==n.constructor},b.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=v({},this.state),\"function\"==typeof n&&(n=n(v({},u),this.props)),n&&v(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),w(this))},b.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),w(this))},b.prototype.render=g,i=[],r=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,f=function(n,l){return n.__v.__b-l.__v.__b},x.__r=0,e=0;export{b as Component,g as Fragment,E as cloneElement,F as createContext,y as createElement,_ as createRef,y as h,B as hydrate,t as isValidElement,l as options,q as render,$ as toChildArray};\n//# sourceMappingURL=preact.module.js.map\n","import{options as n}from\"preact\";var t,r,u,i,o=0,f=[],c=[],e=n.__b,a=n.__r,v=n.diffed,l=n.__c,m=n.unmount;function d(t,u){n.__h&&n.__h(r,t,o||u),o=0;var i=r.__H||(r.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t]}function h(n){return o=1,s(B,n)}function s(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}))}],o.__c=r,!r.u)){var f=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return!n.__N}))return!c||c.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0)}}),!(!i&&o.__c.props===n)&&(!c||c.call(this,n,t,r))};r.u=!0;var c=r.shouldComponentUpdate,e=r.componentWillUpdate;r.componentWillUpdate=function(n,t,r){if(this.__e){var u=c;c=void 0,f(n,t,r),c=u}e&&e.call(this,n,t,r)},r.shouldComponentUpdate=f}return o.__N||o.__}function p(u,i){var o=d(t++,3);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__H.__h.push(o))}function y(u,i){var o=d(t++,4);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__h.push(o))}function _(n){return o=5,F(function(){return{current:n}},[])}function A(n,t,r){o=6,y(function(){return\"function\"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n))}function F(n,r){var u=d(t++,7);return z(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T(n,t){return o=8,F(function(){return n},t)}function q(n){var u=r.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function x(t,r){n.useDebugValue&&n.useDebugValue(r?r(t):t)}function P(n){var u=d(t++,10),i=h();return u.__=n,r.componentDidCatch||(r.componentDidCatch=function(n,t){u.__&&u.__(n,t),i[1](n)}),[i[0],function(){i[1](void 0)}]}function V(){var n=d(t++,11);if(!n.__){for(var u=r.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__=\"P\"+i[0]+\"-\"+i[1]++}return n.__}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k),t.__H.__h.forEach(w),t.__H.__h=[]}catch(r){t.__H.__h=[],n.__e(r,t.__v)}}n.__b=function(n){r=null,e&&e(n)},n.__r=function(n){a&&a(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0})):(i.__h.forEach(k),i.__h.forEach(w),i.__h=[],t=0)),u=r},n.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===n.requestAnimationFrame||((i=n.requestAnimationFrame)||j)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c})),u=r=null},n.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k),t.__h=t.__h.filter(function(n){return!n.__||w(n)})}catch(u){r.some(function(n){n.__h&&(n.__h=[])}),r=[],n.__e(u,t.__v)}}),l&&l(t,r)},n.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k(n)}catch(n){r=n}}),u.__H=void 0,r&&n.__e(r,u.__v))};var g=\"function\"==typeof requestAnimationFrame;function j(n){var t,r=function(){clearTimeout(u),g&&cancelAnimationFrame(t),setTimeout(n)},u=setTimeout(r,100);g&&(t=requestAnimationFrame(r))}function k(n){var t=r,u=n.__c;\"function\"==typeof u&&(n.__c=void 0,u()),r=t}function w(n){var t=r;n.__c=n.__(),r=t}function z(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B(n,t){return\"function\"==typeof t?t(n):t}export{T as useCallback,q as useContext,x as useDebugValue,p as useEffect,P as useErrorBoundary,V as useId,A as useImperativeHandle,y as useLayoutEffect,F as useMemo,s as useReducer,_ as useRef,h as useState};\n//# sourceMappingURL=hooks.module.js.map\n","/**\n * Having Survey types in types.ts was confusing tsc\n * and generating an invalid module.d.ts\n * See https://github.com/PostHog/posthog-js/issues/698\n */\n\nexport enum SurveyWidgetType {\n    Button = 'button',\n    Tab = 'tab',\n    Selector = 'selector',\n}\n\nexport enum SurveyPosition {\n    Left = 'left',\n    Center = 'center',\n    Right = 'right',\n    NextToTrigger = 'next_to_trigger',\n}\n\nexport interface SurveyAppearance {\n    // keep in sync with frontend/src/types.ts -> SurveyAppearance\n    backgroundColor?: string\n    submitButtonColor?: string\n    // text color is deprecated, use auto contrast text color instead\n    textColor?: string\n    // deprecate submit button text eventually\n    submitButtonText?: string\n    submitButtonTextColor?: string\n    descriptionTextColor?: string\n    ratingButtonColor?: string\n    ratingButtonActiveColor?: string\n    ratingButtonHoverColor?: string\n    whiteLabel?: boolean\n    autoDisappear?: boolean\n    displayThankYouMessage?: boolean\n    thankYouMessageHeader?: string\n    thankYouMessageDescription?: string\n    thankYouMessageDescriptionContentType?: SurveyQuestionDescriptionContentType\n    thankYouMessageCloseButtonText?: string\n    borderColor?: string\n    position?: SurveyPosition\n    placeholder?: string\n    shuffleQuestions?: boolean\n    surveyPopupDelaySeconds?: number\n    // widget options\n    widgetType?: SurveyWidgetType\n    widgetSelector?: string\n    widgetLabel?: string\n    widgetColor?: string\n    fontFamily?: string\n    // questionable: Not in frontend/src/types.ts -> SurveyAppearance, but used in site app\n    maxWidth?: string\n    zIndex?: string\n    disabledButtonOpacity?: string\n}\n\nexport enum SurveyType {\n    Popover = 'popover',\n    API = 'api',\n    Widget = 'widget',\n}\n\nexport type SurveyQuestion = BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion | MultipleSurveyQuestion\n\nexport type SurveyQuestionDescriptionContentType = 'html' | 'text'\n\ninterface SurveyQuestionBase {\n    question: string\n    id?: string\n    description?: string | null\n    descriptionContentType?: SurveyQuestionDescriptionContentType\n    optional?: boolean\n    buttonText?: string\n    branching?: NextQuestionBranching | EndBranching | ResponseBasedBranching | SpecificQuestionBranching\n}\n\nexport interface BasicSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Open\n}\n\nexport interface LinkSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Link\n    link?: string | null\n}\n\nexport interface RatingSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Rating\n    display: 'number' | 'emoji'\n    scale: 3 | 5 | 7 | 10\n    lowerBoundLabel: string\n    upperBoundLabel: string\n}\n\nexport interface MultipleSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.SingleChoice | SurveyQuestionType.MultipleChoice\n    choices: string[]\n    hasOpenChoice?: boolean\n    shuffleOptions?: boolean\n}\n\nexport enum SurveyQuestionType {\n    Open = 'open',\n    MultipleChoice = 'multiple_choice',\n    SingleChoice = 'single_choice',\n    Rating = 'rating',\n    Link = 'link',\n}\n\nexport enum SurveyQuestionBranchingType {\n    NextQuestion = 'next_question',\n    End = 'end',\n    ResponseBased = 'response_based',\n    SpecificQuestion = 'specific_question',\n}\n\ninterface NextQuestionBranching {\n    type: SurveyQuestionBranchingType.NextQuestion\n}\n\ninterface EndBranching {\n    type: SurveyQuestionBranchingType.End\n}\n\ninterface ResponseBasedBranching {\n    type: SurveyQuestionBranchingType.ResponseBased\n    responseValues: Record<string, any>\n}\n\ninterface SpecificQuestionBranching {\n    type: SurveyQuestionBranchingType.SpecificQuestion\n    index: number\n}\n\nexport type SurveyCallback = (surveys: Survey[], context?: { isLoaded: boolean; error?: string }) => void\n\nexport type SurveyMatchType = 'regex' | 'not_regex' | 'exact' | 'is_not' | 'icontains' | 'not_icontains'\n\nexport interface SurveyElement {\n    text?: string\n    $el_text?: string\n    tag_name?: string\n    href?: string\n    attr_id?: string\n    attr_class?: string[]\n    nth_child?: number\n    nth_of_type?: number\n    attributes?: Record<string, any>\n    event_id?: number\n    order?: number\n    group_id?: number\n}\nexport interface SurveyRenderReason {\n    visible: boolean\n    disabledReason?: string\n}\n\nexport enum SurveySchedule {\n    Once = 'once',\n    Recurring = 'recurring',\n    Always = 'always',\n}\n\nexport interface Survey {\n    // Sync this with the backend's SurveyAPISerializer!\n    id: string\n    name: string\n    description: string\n    type: SurveyType\n    feature_flag_keys:\n        | {\n              key: string\n              value?: string\n          }[]\n        | null\n    linked_flag_key: string | null\n    targeting_flag_key: string | null\n    internal_targeting_flag_key: string | null\n    questions: SurveyQuestion[]\n    appearance: SurveyAppearance | null\n    conditions: {\n        url?: string\n        selector?: string\n        seenSurveyWaitPeriodInDays?: number\n        urlMatchType?: SurveyMatchType\n        events: {\n            repeatedActivation?: boolean\n            values: {\n                name: string\n            }[]\n        } | null\n        actions: {\n            values: SurveyActionType[]\n        } | null\n        deviceTypes?: string[]\n        deviceTypesMatchType?: SurveyMatchType\n    } | null\n    start_date: string | null\n    end_date: string | null\n    current_iteration: number | null\n    current_iteration_start_date: string | null\n    schedule?: SurveySchedule | null\n    enable_partial_responses?: boolean | null\n}\n\nexport interface SurveyActionType {\n    id: number\n    name: string | null\n    steps?: ActionStepType[]\n}\n\n/** Sync with plugin-server/src/types.ts */\nexport type ActionStepStringMatching = 'contains' | 'exact' | 'regex'\n\nexport interface ActionStepType {\n    event?: string | null\n    selector?: string | null\n    /** @deprecated Only `selector` should be used now. */\n    tag_name?: string\n    text?: string | null\n    /** @default StringMatching.Exact */\n    text_matching?: ActionStepStringMatching | null\n    href?: string | null\n    /** @default ActionStepStringMatching.Exact */\n    href_matching?: ActionStepStringMatching | null\n    url?: string | null\n    /** @default StringMatching.Contains */\n    url_matching?: ActionStepStringMatching | null\n}\n","import type { PostHog } from '../posthog-core'\nimport { SessionIdManager } from '../sessionid'\nimport { DeadClicksAutoCaptureConfig, Properties, RemoteConfig, SiteAppLoader } from '../types'\n\n/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\nexport type AssignableWindow = Window &\n    typeof globalThis & {\n        __PosthogExtensions__?: PostHogExtensions\n\n        _POSTHOG_REMOTE_CONFIG?: Record<\n            string,\n            {\n                config: RemoteConfig\n                siteApps: SiteAppLoader[]\n            }\n        >\n\n        doNotTrack: any\n        posthogCustomizations: any\n        posthogErrorWrappingFunctions: any\n        rrweb: any\n        rrwebConsoleRecord: any\n        getRecordNetworkPlugin: any\n        POSTHOG_DEBUG: any\n        posthog: any\n        ph_load_toolbar: any\n        ph_load_editor: any\n        ph_toolbar_state: any\n        postHogWebVitalsCallbacks: any\n        postHogTracingHeadersPatchFns: any\n        extendPostHogWithSurveys: any\n    } & Record<`__$$ph_site_app_${string}`, any>\n\n/**\n * This is our contract between (potentially) lazily loaded extensions and the SDK\n * changes to this interface can be breaking changes for users of the SDK\n */\n\nexport type PostHogExtensionKind =\n    | 'toolbar'\n    | 'exception-autocapture'\n    | 'web-vitals'\n    | 'recorder'\n    | 'tracing-headers'\n    | 'surveys'\n    | 'dead-clicks-autocapture'\n    | 'remote-config'\n\nexport interface LazyLoadedDeadClicksAutocaptureInterface {\n    start: (observerTarget: Node) => void\n    stop: () => void\n}\n\ninterface PostHogExtensions {\n    loadExternalDependency?: (\n        posthog: PostHog,\n        kind: PostHogExtensionKind,\n        callback: (error?: string | Event, event?: Event) => void\n    ) => void\n\n    loadSiteApp?: (posthog: PostHog, appUrl: string, callback: (error?: string | Event, event?: Event) => void) => void\n\n    errorWrappingFunctions?: {\n        wrapOnError: (captureFn: (props: Properties) => void) => () => void\n        wrapUnhandledRejection: (captureFn: (props: Properties) => void) => () => void\n        wrapConsoleError: (captureFn: (props: Properties) => void) => () => void\n    }\n    rrweb?: { record: any; version: string }\n    rrwebPlugins?: { getRecordConsolePlugin: any; getRecordNetworkPlugin?: any }\n    canActivateRepeatedly?: (survey: any) => boolean\n    generateSurveys?: (posthog: PostHog) => any | undefined\n    postHogWebVitalsCallbacks?: {\n        onLCP: (metric: any) => void\n        onCLS: (metric: any) => void\n        onFCP: (metric: any) => void\n        onINP: (metric: any) => void\n    }\n    tracingHeadersPatchFns?: {\n        _patchFetch: (sessionManager?: SessionIdManager) => () => void\n        _patchXHR: (sessionManager?: SessionIdManager) => () => void\n    }\n    initDeadClicksAutocapture?: (\n        ph: PostHog,\n        config: DeadClicksAutoCaptureConfig\n    ) => LazyLoadedDeadClicksAutocaptureInterface\n}\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nexport const navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: AssignableWindow = win ?? ({} as any)\n\nexport { win as window }\n","import type { recordOptions } from './extensions/replay/types/rrweb'\nimport type { SegmentAnalytics } from './extensions/segment-integration'\nimport { PostHog } from './posthog-core'\nimport { Survey } from './posthog-surveys-types'\n\nexport type Property = any\nexport type Properties = Record<string, Property>\n\nexport const COPY_AUTOCAPTURE_EVENT = '$copy_autocapture'\n\nexport const knownUnsafeEditableEvent = [\n    '$snapshot',\n    '$pageview',\n    '$pageleave',\n    '$set',\n    'survey dismissed',\n    'survey sent',\n    'survey shown',\n    '$identify',\n    '$groupidentify',\n    '$create_alias',\n    '$$client_ingestion_warning',\n    '$web_experiment_applied',\n    '$feature_enrollment_update',\n    '$feature_flag_called',\n] as const\n\n/**\n * These events can be processed by the `beforeCapture` function\n * but can cause unexpected confusion in data.\n *\n * Some features of PostHog rely on receiving 100% of these events\n */\nexport type KnownUnsafeEditableEvent = (typeof knownUnsafeEditableEvent)[number]\n\n/**\n * These are known events PostHog events that can be processed by the `beforeCapture` function\n * That means PostHog functionality does not rely on receiving 100% of these for calculations\n * So, it is safe to sample them to reduce the volume of events sent to PostHog\n */\nexport type KnownEventName =\n    | '$heatmaps_data'\n    | '$opt_in'\n    | '$exception'\n    | '$$heatmap'\n    | '$web_vitals'\n    | '$dead_click'\n    | '$autocapture'\n    | typeof COPY_AUTOCAPTURE_EVENT\n    | '$rageclick'\n\nexport type EventName =\n    | KnownUnsafeEditableEvent\n    | KnownEventName\n    // magic value so that the type of EventName is a set of known strings or any other string\n    // which means you get autocomplete for known strings\n    // but no type complaints when you add an arbitrary string\n    | (string & {})\n\nexport interface CaptureResult {\n    uuid: string\n    event: EventName\n    properties: Properties\n    $set?: Properties\n    $set_once?: Properties\n    timestamp?: Date\n}\n\nexport type AutocaptureCompatibleElement = 'a' | 'button' | 'form' | 'input' | 'select' | 'textarea' | 'label'\nexport type DomAutocaptureEvents = 'click' | 'change' | 'submit'\n\n/**\n * If an array is passed for an allowlist, autocapture events will only be sent for elements matching\n * at least one of the elements in the array. Multiple allowlists can be used\n */\nexport interface AutocaptureConfig {\n    /**\n     * List of URLs to allow autocapture on, can be strings to match\n     * or regexes e.g. ['https://example.com', 'test.com/.*']\n     * this is useful when you want to autocapture on specific pages only\n     *\n     * if you set both url_allowlist and url_ignorelist,\n     * we check the allowlist first and then the ignorelist.\n     * the ignorelist can override the allowlist\n     */\n    url_allowlist?: (string | RegExp)[]\n\n    /**\n     * List of URLs to not allow autocapture on, can be strings to match\n     * or regexes e.g. ['https://example.com', 'test.com/.*']\n     * this is useful when you want to autocapture on most pages but not some specific ones\n     *\n     * if you set both url_allowlist and url_ignorelist,\n     * we check the allowlist first and then the ignorelist.\n     * the ignorelist can override the allowlist\n     */\n    url_ignorelist?: (string | RegExp)[]\n\n    /**\n     * List of DOM events to allow autocapture on  e.g. ['click', 'change', 'submit']\n     */\n    dom_event_allowlist?: DomAutocaptureEvents[]\n\n    /**\n     * List of DOM elements to allow autocapture on\n     * e.g. ['a', 'button', 'form', 'input', 'select', 'textarea', 'label']\n     *\n     * We consider the tree of elements from the root to the target element of the click event\n     * so for the tree `div > div > button > svg`\n     * if the allowlist has `button` then we allow the capture when the `button` or the `svg` is the click target\n     * but not if either of the `div`s are detected as the click target\n     */\n    element_allowlist?: AutocaptureCompatibleElement[]\n\n    /**\n     * List of CSS selectors to allow autocapture on\n     * e.g. ['[ph-capture]']\n     * we consider the tree of elements from the root to the target element of the click event\n     * so for the tree div > div > button > svg\n     * and allow list config `['[id]']`\n     * we will capture the click if the click-target or its parents has any id\n     *\n     * Everything is allowed when there's no allowlist\n     */\n    css_selector_allowlist?: string[]\n\n    /**\n     * Exclude certain element attributes from autocapture\n     * E.g. ['aria-label'] or [data-attr-pii]\n     */\n    element_attribute_ignorelist?: string[]\n\n    /**\n     * When set to true, autocapture will capture the text of any element that is cut or copied.\n     */\n    capture_copied_text?: boolean\n}\n\nexport interface BootstrapConfig {\n    distinctID?: string\n    isIdentifiedID?: boolean\n    featureFlags?: Record<string, boolean | string>\n    featureFlagPayloads?: Record<string, JsonType>\n\n    /**\n     * Optionally provide a sessionID, this is so that you can provide an existing sessionID here to continue a user's session across a domain or device. It MUST be:\n     * - unique to this user\n     * - a valid UUID v7\n     * - the timestamp part must be <= the timestamp of the first event in the session\n     * - the timestamp of the last event in the session must be < the timestamp part + 24 hours\n     * **/\n    sessionID?: string\n}\n\nexport type SupportedWebVitalsMetrics = 'LCP' | 'CLS' | 'FCP' | 'INP'\n\nexport interface PerformanceCaptureConfig {\n    /**\n     *  Works with session replay to use the browser's native performance observer to capture performance metrics\n     */\n    network_timing?: boolean\n\n    /**\n     * Use chrome's web vitals library to wrap fetch and capture web vitals\n     */\n    web_vitals?: boolean\n\n    /**\n     * We observe very large values reported by the Chrome web vitals library\n     * These outliers are likely not real, useful values, and we exclude them\n     * You can set this to 0 in order to include all values, NB this is not recommended\n     *\n     * @default 15 * 60 * 1000 (15 minutes)\n     */\n    __web_vitals_max_value?: number\n\n    /**\n     * By default all 4 metrics are captured\n     * You can set this config to restrict which metrics are captured\n     * e.g. ['CLS', 'FCP'] to only capture those two metrics\n     * NB setting this does not override whether the capture is enabled\n     *\n     * @default ['LCP', 'CLS', 'FCP', 'INP']\n     */\n    web_vitals_allowed_metrics?: SupportedWebVitalsMetrics[]\n\n    /**\n     * We delay flushing web vitals metrics to reduce the number of events we send\n     * This is the maximum time we will wait before sending the metrics\n     *\n     * @default 5000\n     */\n    web_vitals_delayed_flush_ms?: number\n}\n\nexport interface DeadClickCandidate {\n    node: Element\n    originalEvent: MouseEvent\n    timestamp: number\n    // time between click and the most recent scroll\n    scrollDelayMs?: number\n    // time between click and the most recent mutation\n    mutationDelayMs?: number\n    // time between click and the most recent selection changed event\n    selectionChangedDelayMs?: number\n    // if neither scroll nor mutation seen before threshold passed\n    absoluteDelayMs?: number\n}\n\nexport type ExceptionAutoCaptureConfig = {\n    /**\n     * Determines whether PostHog should capture unhandled errors.\n     *\n     * @default true\n     */\n    capture_unhandled_errors: boolean\n\n    /**\n     * Determines whether PostHog should capture unhandled promise rejections.\n     *\n     * @default true\n     */\n    capture_unhandled_rejections: boolean\n\n    /**\n     * Determines whether PostHog should capture console errors.\n     *\n     * @default false\n     */\n    capture_console_errors: boolean\n}\n\nexport type DeadClicksAutoCaptureConfig = {\n    /**\n     * We'll not consider a click to be a dead click, if it's followed by a scroll within `scroll_threshold_ms` milliseconds\n     *\n     * @default 100\n     */\n    scroll_threshold_ms?: number\n\n    /**\n     * We'll not consider a click to be a dead click, if it's followed by a selection change within `selection_change_threshold_ms` milliseconds\n     *\n     * @default 100\n     */\n    selection_change_threshold_ms?: number\n\n    /**\n     * We'll not consider a click to be a dead click, if it's followed by a mutation within `mutation_threshold_ms` milliseconds\n     *\n     * @default 2500\n     */\n    mutation_threshold_ms?: number\n\n    /**\n     * Allows setting behavior for when a dead click is captured.\n     * For e.g. to support capture to heatmaps\n     *\n     * If not provided the default behavior is to auto-capture dead click events\n     *\n     * Only intended to be provided by our own SDK\n     */\n    __onCapture?: ((click: DeadClickCandidate, properties: Properties) => void) | undefined\n} & Pick<AutocaptureConfig, 'element_attribute_ignorelist'>\n\nexport interface HeatmapConfig {\n    /**\n     * How often to send batched data in `$heatmap_data` events\n     * If set to 0 or not set, sends using the default interval of 1 second\n     *\n     * @default 1000\n     */\n    flush_interval_milliseconds: number\n}\n\nexport type BeforeSendFn = (cr: CaptureResult | null) => CaptureResult | null\n\n/**\n * Configuration options for the PostHog JavaScript SDK.\n * @see https://posthog.com/docs/libraries/js#config\n */\nexport interface PostHogConfig {\n    /** URL of your PostHog instance.\n     *\n     * @default 'https://us.i.posthog.com'\n     */\n    api_host: string\n\n    /**\n     * If using a reverse proxy for `api_host` then this should be the actual PostHog app URL (e.g. https://us.posthog.com).\n     * This ensures that links to PostHog point to the correct host.\n     *\n     * @default null\n     */\n    ui_host: string | null\n\n    /**\n     * The transport method to use for API requests.\n     *\n     * @default 'fetch'\n     */\n    api_transport?: 'XHR' | 'fetch'\n\n    /**\n     * The token for your PostHog project.\n     * It should NOT be provided manually in the config, but rather passed as the first parameter to `posthog.init()`.\n     */\n    token: string\n\n    /**\n     * The name this instance will be identified by.\n     * You don't need to set this most of the time,\n     * but can be useful if you have several Posthog instances running at the same time.\n     *\n     * @default 'posthog'\n     */\n    name: string\n\n    /**\n     * Determines whether PostHog should autocapture events.\n     * This setting does not affect capturing pageview events (see `capture_pageview`).\n     *\n     * @default true\n     */\n    autocapture: boolean | AutocaptureConfig\n\n    /**\n     * Determines whether PostHog should capture rage clicks.\n     *\n     * @default true\n     */\n    rageclick: boolean\n\n    /**\n     * Determines if cookie should be set on the top level domain (example.com).\n     * If PostHog-js is loaded on a subdomain (test.example.com), and `cross_subdomain_cookie` is set to false,\n     * it'll set the cookie on the subdomain only (test.example.com).\n     *\n     * NOTE: It will be set to `false` if we detect that the domain is a subdomain of a platform that is excluded from cross-subdomain cookie setting.\n     * The current list of excluded platforms is `herokuapp.com`, `vercel.app`, and `netlify.app`.\n     *\n     * @see `isCrossDomainCookie`\n     * @default true\n     */\n    cross_subdomain_cookie: boolean\n\n    /**\n     * Determines how PostHog stores information about the user. See [persistence](https://posthog.com/docs/libraries/js#persistence) for details.\n     *\n     * @default 'localStorage+cookie'\n     */\n    persistence: 'localStorage' | 'cookie' | 'memory' | 'localStorage+cookie' | 'sessionStorage'\n\n    /**\n     * The name for the super properties persistent store\n     *\n     * @default ''\n     */\n    persistence_name: string\n\n    /** @deprecated - Use 'persistence_name' instead */\n    cookie_name?: string\n\n    /**\n     * A function to be called once the PostHog scripts have loaded successfully.\n     *\n     * @param posthog_instance - The PostHog instance that has been loaded.\n     */\n    loaded: (posthog_instance: PostHog) => void\n\n    /**\n     * Determines whether PostHog should save referrer information.\n     *\n     * @default true\n     */\n    save_referrer: boolean\n\n    /**\n     * Determines whether PostHog should save marketing parameters.\n     * These are `utm_*` paramaters and friends.\n     *\n     * @see {CAMPAIGN_PARAMS} from './utils/event-utils' - Default campaign parameters like utm_source, utm_medium, etc.\n     * @default true\n     */\n    save_campaign_params: boolean\n\n    /** @deprecated - Use `save_campaign_params` instead */\n    store_google?: boolean\n\n    /**\n     * Used to extend the list of campaign parameters that are saved by default.\n     *\n     * @see {CAMPAIGN_PARAMS} from './utils/event-utils' - Default campaign parameters like utm_source, utm_medium, etc.\n     * @default []\n     */\n    custom_campaign_params: string[]\n\n    /**\n     * Used to extend the list of user agents that are blocked by default.\n     *\n     * @see {DEFAULT_BLOCKED_UA_STRS} from './utils/blocked-uas' - Default list of blocked user agents.\n     * @default []\n     */\n    custom_blocked_useragents: string[]\n\n    /**\n     * Determines whether PostHog should be in debug mode.\n     * You can enable this to get more detailed logging.\n     *\n     * You can also enable this on your website by appending `?__posthog_debug=true` at the end of your URL\n     * You can also call `posthog.debug()` in your code to enable debug mode\n     *\n     * @default false\n     */\n    debug: boolean\n\n    /** @deprecated Use `debug` instead */\n    verbose?: boolean\n\n    /**\n     * Determines whether PostHog should capture pageview events automatically.\n     * Can be:\n     * - `true`: Capture regular pageviews (default)\n     * - `false`: Don't capture any pageviews\n     * - `'history_change'`: Only capture pageviews on history API changes (pushState, replaceState, popstate)\n     *\n     * @default true\n     */\n    capture_pageview: boolean | 'history_change'\n\n    /**\n     * Determines whether PostHog should capture pageleave events.\n     * If set to `true`, it will capture pageleave events for all pages.\n     * If set to `'if_capture_pageview'`, it will only capture pageleave events if `capture_pageview` is also set to `true` or `'history_change'`.\n     *\n     * @default 'if_capture_pageview'\n     */\n    capture_pageleave: boolean | 'if_capture_pageview'\n\n    /**\n     * Determines the number of days to store cookies for.\n     *\n     * @default 365\n     */\n    cookie_expiration: number\n\n    /**\n     * Determines whether PostHog should upgrade old cookies.\n     * If set to `true`, the library will check for a cookie from our old js library and import super properties from it, then the old cookie is deleted.\n     * This option only works in the initialization, so make sure you set it when you create the library.\n     *\n     * @default false\n     */\n    upgrade: boolean\n\n    /**\n     * Determines whether PostHog should disable session recording.\n     *\n     * @default false\n     */\n    disable_session_recording: boolean\n\n    /**\n     * Determines whether PostHog should disable persistence.\n     * If set to `true`, the library will not save any data to the browser. It will also delete any data previously saved to the browser.\n     *\n     * @default false\n     */\n    disable_persistence: boolean\n\n    /** @deprecated - use `disable_persistence` instead */\n    disable_cookie?: boolean\n\n    /**\n     * Determines whether PostHog should disable surveys.\n     *\n     * @default false\n     */\n    disable_surveys: boolean\n\n    /**\n     * Determines whether PostHog should disable web experiments.\n     *\n     * Currently disabled while we're in BETA. It will be toggled to `true` in a future release.\n     *\n     * @default true\n     */\n    disable_web_experiments: boolean\n\n    /**\n     * Determines whether PostHog should disable any external dependency loading.\n     * This will prevent PostHog from requesting any external scripts such as those needed for Session Replay, Surveys or Site Apps.\n     *\n     * @default false\n     */\n    disable_external_dependency_loading: boolean\n\n    /**\n     * A function to be called when a script is being loaded.\n     * This can be used to modify the script before it is loaded.\n     * This is useful for adding a nonce to the script, for example.\n     *\n     * @param script - The script element that is being loaded.\n     * @returns The modified script element, or null if the script should not be loaded.\n     */\n    prepare_external_dependency_script?: (script: HTMLScriptElement) => HTMLScriptElement | null\n\n    /**\n     * A function to be called when a stylesheet is being loaded.\n     * This can be used to modify the stylesheet before it is loaded.\n     * This is useful for adding a nonce to the stylesheet, for example.\n     *\n     * @param stylesheet - The stylesheet element that is being loaded.\n     * @returns The modified stylesheet element, or null if the stylesheet should not be loaded.\n     */\n    prepare_external_dependency_stylesheet?: (stylesheet: HTMLStyleElement) => HTMLStyleElement | null\n\n    /**\n     * Determines whether PostHog should enable recording console logs.\n     * When undefined, it falls back to the remote config setting.\n     *\n     * @default undefined\n     */\n    enable_recording_console_log?: boolean\n\n    /**\n     * Determines whether PostHog should use secure cookies.\n     * If this is `true`, PostHog cookies will be marked as secure,\n     * meaning they will only be transmitted over HTTPS.\n     *\n     * @default window.location.protocol === 'https:'\n     */\n    secure_cookie: boolean\n\n    /**\n     * Determines whether PostHog should capture IP addresses.\n     *\n     * @default true\n     */\n    ip: boolean\n\n    /**\n     * Determines if users should be opted out of PostHog tracking by default,\n     * requiring additional logic to opt them into capturing by calling `posthog.opt_in_capturing()`.\n     *\n     * @default false\n     */\n    opt_out_capturing_by_default: boolean\n\n    /**\n     * Determines where we'll save the information about whether users are opted out of capturing.\n     *\n     * @default 'localStorage'\n     */\n    opt_out_capturing_persistence_type: 'localStorage' | 'cookie'\n\n    /**\n     * Determines if users should be opted out of browser data storage by this PostHog instance by default,\n     * requiring additional logic to opt them into capturing by calling `posthog.opt_in_capturing()`.\n     *\n     * @default false\n     */\n    opt_out_persistence_by_default?: boolean\n\n    /**\n     * Determines if users should be opted out of user agent filtering such as googlebot or other bots.\n     * If this is set to `true`, PostHog will set `$browser_type` to either `bot` or `browser` for all events,\n     * but will process all events as if they were from a browser.\n     *\n     * @default false\n     */\n    opt_out_useragent_filter: boolean\n\n    /**\n     * Determines the prefix for the cookie used to store the information about whether users are opted out of capturing.\n     * When `null`, it falls back to the default prefix found in `consent.ts`.\n     *\n     * @default null\n     */\n    opt_out_capturing_cookie_prefix: string | null\n\n    /**\n     * Determines if users should be opted in to site apps.\n     *\n     * @default false\n     */\n    opt_in_site_apps: boolean\n\n    /**\n     * Determines whether PostHog should respect the Do Not Track header when computing\n     * consent in `ConsentManager`.\n     *\n     * @see `ConsentManager`\n     * @default false\n     */\n    respect_dnt: boolean\n\n    /**\n     * A list of properties that should never be sent with capture calls.\n     *\n     * @default []\n     */\n    property_denylist: string[]\n\n    /** @deprecated - use `property_denylist` instead  */\n    property_blacklist?: string[]\n\n    /**\n     * A list of headers that should be sent with requests to the PostHog API.\n     *\n     * @default {}\n     */\n    request_headers: { [header_name: string]: string }\n\n    /** @deprecated - use `request_headers` instead  */\n    xhr_headers?: { [header_name: string]: string }\n\n    /**\n     * A function that is called when a request to the PostHog API fails.\n     *\n     * @param error - The `RequestResponse` object that occurred.\n     */\n    on_request_error?: (error: RequestResponse) => void\n\n    /** @deprecated - use `on_request_error` instead  */\n    on_xhr_error?: (failedRequest: XMLHttpRequest) => void\n\n    /**\n     * Determines whether PostHog should batch requests to the PostHog API.\n     *\n     * @default true\n     */\n    request_batching: boolean\n\n    /**\n     * Determines the maximum length of the properties string that can be sent with capture calls.\n     *\n     * @default 65535\n     */\n    properties_string_max_length: number\n\n    /**\n     * Determines the session recording options.\n     *\n     * @see `SessionRecordingOptions`\n     * @default {}\n     */\n    session_recording: SessionRecordingOptions\n\n    /**\n     * Determines the session idle timeout in seconds.\n     * Any new event that's happened after this timeout will create a new session.\n     *\n     * @default 30 * 60 -- 30 minutes\n     */\n    session_idle_timeout_seconds: number\n\n    /**\n     * Prevent autocapture from capturing any attribute names on elements.\n     *\n     * @default false\n     */\n    mask_all_element_attributes: boolean\n\n    /**\n     * Prevent autocapture from capturing `textContent` on elements.\n     *\n     * @default false\n     */\n    mask_all_text: boolean\n\n    /**\n     * Prevent autocapture from capturing personal data properties.\n     * These include campaign parameters, UTM parameters, and other parameters that could be considered personal data under e.g. GDPR.\n     *\n     * @default false\n     */\n    mask_personal_data_properties: boolean\n\n    /**\n     * Custom list of personal data properties to mask.\n     *\n     * @default []\n     */\n    custom_personal_data_properties: string[]\n\n    /**\n     * One of the very first things the PostHog library does when init() is called\n     * is make a request to the /decide endpoint on PostHog's backend.\n     * This endpoint contains information on how to run the PostHog library\n     * so events are properly received in the backend.\n     *\n     * This endpoint is required to run most features of the library.\n     * However, if you're not using any of the described features,\n     * you may wish to turn off the call completely to avoid an extra request\n     * and reduce resource usage on both the client and the server.\n     *\n     * @default false\n     */\n    advanced_disable_decide: boolean\n\n    /**\n     * Will keep /decide running, but without any feature flag requests\n     *\n     * @default false\n     */\n    advanced_disable_feature_flags: boolean\n\n    /**\n     * Stops from firing feature flag requests on first page load.\n     * Only requests feature flags when user identity or properties are updated,\n     * or you manually request for flags to be loaded.\n     *\n     * @default false\n     */\n    advanced_disable_feature_flags_on_first_load: boolean\n\n    /**\n     * Determines whether PostHog should disable toolbar metrics.\n     * This is our internal instrumentation for our toolbar in your website.\n     *\n     * @default false\n     */\n    advanced_disable_toolbar_metrics: boolean\n\n    /**\n     * Sets timeout for fetching feature flags\n     *\n     * @default 3000\n     */\n    feature_flag_request_timeout_ms: number\n\n    /**\n     * Sets timeout for fetching surveys\n     *\n     * @default 10000\n     */\n    surveys_request_timeout_ms: number\n\n    /**\n     * Function to get the device ID.\n     * This doesn't usually need to be set, but can be useful if you want to use a custom device ID.\n     *\n     * @param uuid - The UUID we would use for the device ID.\n     * @returns The device ID.\n     *\n     * @default (uuid) => uuid\n     */\n    get_device_id: (uuid: string) => string\n\n    /**\n     * This function or array of functions - if provided - are called immediately before sending data to the server.\n     * It allows you to edit data before it is sent, or choose not to send it all.\n     * if provided as an array the functions are called in the order they are provided\n     * any one function returning null means the event will not be sent\n     */\n    before_send?: BeforeSendFn | BeforeSendFn[]\n\n    /** @deprecated - use `before_send` instead */\n    sanitize_properties: ((properties: Properties, event_name: string) => Properties) | null\n\n    /** @deprecated - use `before_send` instead */\n    _onCapture: (eventName: string, eventData: CaptureResult) => void\n\n    /**\n     * Determines whether to capture performance metrics.\n     * These include Network Timing and Web Vitals.\n     *\n     * When `undefined`, fallback to the remote configuration.\n     * If `false`, neither network timing nor web vitals will work.\n     * If an object, that will override the remote configuration.\n     *\n     * @see {PerformanceCaptureConfig}\n     * @default undefined\n     */\n    capture_performance?: boolean | PerformanceCaptureConfig\n\n    /**\n     * Determines whether to disable compression when sending events to the server.\n     * WARNING: Should only be used for testing. Could negatively impact performance.\n     *\n     * @default false\n     */\n    disable_compression: boolean\n\n    /**\n     * An object containing the `distinctID`, `isIdentifiedID`, and `featureFlags` keys,\n     * where `distinctID` is a string, and `featureFlags` is an object of key-value pairs.\n     *\n     * Since there is a delay between initializing PostHog and fetching feature flags,\n     * feature flags are not always available immediately.\n     * This makes them unusable if you want to do something like redirecting a user\n     * to a different page based on a feature flag.\n     *\n     * You can, therefore, fetch the feature flags in your server and pre-fill them here,\n     * allowing PostHog to know the feature flag values immediately.\n     *\n     * After the SDK fetches feature flags from PostHog, it will use those flag values instead of bootstrapped ones.\n     *\n     * @default {}\n     */\n    bootstrap: BootstrapConfig\n\n    /**\n     * The segment analytics object.\n     *\n     * @see https://posthog.com/docs/libraries/segment\n     */\n    segment?: SegmentAnalytics\n\n    /**\n     * Determines whether to capture heatmaps.\n     *\n     * @see {HeatmapConfig}\n     * @default undefined\n     */\n    capture_heatmaps?: boolean | HeatmapConfig\n\n    /* @deprecated - use `capture_heatmaps` instead */\n    enable_heatmaps?: boolean\n\n    /**\n     * Determines whether to capture dead clicks.\n     *\n     * @see {DeadClicksAutoCaptureConfig}\n     * @default undefined\n     */\n    capture_dead_clicks?: boolean | DeadClicksAutoCaptureConfig\n\n    /**\n     * Determines whether to capture exceptions.\n     *\n     * @see {ExceptionAutoCaptureConfig}\n     * @default undefined\n     */\n    capture_exceptions?: boolean | ExceptionAutoCaptureConfig\n\n    /**\n     * Determines whether to disable scroll properties.\n     * These allow you to keep track of how far down someone scrolled in your website.\n     *\n     * @default false\n     */\n    disable_scroll_properties?: boolean\n\n    /**\n     * Let the pageview scroll stats use a custom css selector for the root element, e.g. `main`\n     * It will use `window.document.documentElement` if not specified.\n     */\n    scroll_root_selector?: string | string[]\n\n    /**\n     * You can control whether events from PostHog-js have person processing enabled with the `person_profiles` config setting.\n     * There are three options:\n     * - `person_profiles: 'always'` - we will process persons data for all events\n     * - `person_profiles: 'never'` - we won't process persons for any event. This means that anonymous users will not be merged once they sign up or login, so you lose the ability to create funnels that track users from anonymous to identified. All events (including `$identify`) will be sent with `$process_person_profile: False`.\n     * - `person_profiles: 'identified_only'` _(default)_ - we will only process persons when you call `posthog.identify`, `posthog.alias`, `posthog.setPersonProperties`, `posthog.group`, `posthog.setPersonPropertiesForFlags` or `posthog.setGroupPropertiesForFlags` Anonymous users won't get person profiles.\n     *\n     * @default 'identified_only'\n     */\n    person_profiles?: 'always' | 'never' | 'identified_only'\n\n    /** @deprecated - use `person_profiles` instead  */\n    process_person?: 'always' | 'never' | 'identified_only'\n\n    /**\n     * Client side rate limiting\n     */\n    rate_limiting?: {\n        /**\n         * The average number of events per second that should be permitted\n         *\n         * @default 10\n         */\n        events_per_second?: number\n\n        /**\n         * How many events can be captured in a burst. This defaults to 10 times the events_per_second count\n         *\n         * @default 10 * `events_per_second`\n         */\n        events_burst_limit?: number\n    }\n\n    /**\n     * Used when sending data via `fetch`, use with care.\n     * This is intentionally meant to be used with NextJS `fetch`\n     *\n     * Incorrect `cache` usage may cause out-of-date data for feature flags, actions tracking, etc.\n     * See https://nextjs.org/docs/app/api-reference/functions/fetch#fetchurl-options\n     */\n    fetch_options?: {\n        cache?: RequestInit['cache']\n        next_options?: NextOptions\n    }\n\n    /**\n     * Used to change the behavior of the request queue.\n     * This is an advanced feature and should be used with caution.\n     */\n    request_queue_config?: RequestQueueConfig\n\n    // ------- PREVIEW CONFIGS -------\n\n    /**\n     * PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION\n     * Whether to wrap fetch and add tracing headers to the request\n     * */\n    __add_tracing_headers?: boolean\n\n    /**\n     * PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION\n     * Enables the new RemoteConfig approach to loading config instead of decide\n     * */\n    __preview_remote_config?: boolean\n\n    /**\n     * PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION\n     * Whether to send a sentinel value for distinct id, device id, and session id, which will be replaced server-side by a cookieless hash\n     * */\n    __preview_experimental_cookieless_mode?: boolean\n\n    /**\n     * PREVIEW - MAY CHANGE WITHOUT WARNING - DO NOT USE IN PRODUCTION\n     * Whether to use the new /flags/ endpoint\n     * */\n    __preview_flags_v2?: boolean\n\n    // ------- RETIRED CONFIGS - NO REPLACEMENT OR USAGE -------\n\n    /** @deprecated - NOT USED ANYMORE, kept here for backwards compatibility reasons */\n    api_method?: string\n\n    /** @deprecated - NOT USED ANYMORE, kept here for backwards compatibility reasons */\n    inapp_protocol?: string\n\n    /** @deprecated - NOT USED ANYMORE, kept here for backwards compatibility reasons */\n    inapp_link_new_window?: boolean\n}\n\nexport interface SessionRecordingOptions {\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default 'ph-no-capture'\n     */\n    blockClass?: string | RegExp\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default null\n     */\n    blockSelector?: string | null\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default 'ph-ignore-input'\n     */\n    ignoreClass?: string | RegExp\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default 'ph-mask'\n     */\n    maskTextClass?: string | RegExp\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     */\n    maskTextSelector?: string | null\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     */\n    maskTextFn?: ((text: string, element?: HTMLElement) => string) | null\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     */\n    maskAllInputs?: boolean\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     */\n    maskInputOptions?: recordOptions['maskInputOptions']\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     */\n    maskInputFn?: ((text: string, element?: HTMLElement) => string) | null\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default {}\n     */\n    slimDOMOptions?: recordOptions['slimDOMOptions']\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default false\n     */\n    collectFonts?: boolean\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default true\n     */\n    inlineStylesheet?: boolean\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default false\n     */\n    recordCrossOriginIframes?: boolean\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default false\n     */\n    recordHeaders?: boolean\n\n    /**\n     * Derived from `rrweb.record` options\n     * @see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     * @default false\n     */\n    recordBody?: boolean\n\n    /**\n     * Allows local config to override remote canvas recording settings from the decide response\n     */\n    captureCanvas?: SessionRecordingCanvasOptions\n\n    /**\n     * Modify the network request before it is captured. Returning null or undefined stops it being captured\n     */\n    maskCapturedNetworkRequestFn?: ((data: CapturedNetworkRequest) => CapturedNetworkRequest | null | undefined) | null\n\n    /** @deprecated - use maskCapturedNetworkRequestFn instead  */\n    maskNetworkRequestFn?: ((data: NetworkRequest) => NetworkRequest | null | undefined) | null\n\n    /**\n     * ADVANCED: while a user is active we take a full snapshot of the browser every interval.\n     * For very few sites playback performance might be better with different interval.\n     * Set to 0 to disable\n     *\n     * @default 1000 * 60 * 5 (5 minutes)\n     */\n    full_snapshot_interval_millis?: number\n\n    /**\n     * ADVANCED: whether to partially compress rrweb events before sending them to the server,\n     * defaults to true, can be set to false to disable partial compression\n     * NB requests are still compressed when sent to the server regardless of this setting\n     *\n     * @default true\n     */\n    compress_events?: boolean\n\n    /**\n     * ADVANCED: alters the threshold before a recording considers a user has become idle.\n     * Normally only altered alongside changes to session_idle_timeout_ms.\n     *\n     * @default 1000 * 60 * 5 (5 minutes)\n     */\n    session_idle_threshold_ms?: number\n\n    /**\n     * ADVANCED: alters the refill rate for the token bucket mutation throttling\n     * Normally only altered alongside posthog support guidance.\n     * Accepts values between 0 and 100\n     *\n     * @default 10\n     */\n    __mutationRateLimiterRefillRate?: number\n\n    /**\n     * ADVANCED: alters the bucket size for the token bucket mutation throttling\n     * Normally only altered alongside posthog support guidance.\n     * Accepts values between 0 and 100\n     *\n     * @default 100\n     */\n    __mutationRateLimiterBucketSize?: number\n}\n\nexport type SessionIdChangedCallback = (\n    sessionId: string,\n    windowId: string | null | undefined,\n    changeReason?: { noSessionId: boolean; activityTimeout: boolean; sessionPastMaximumLength: boolean }\n) => void\n\nexport enum Compression {\n    GZipJS = 'gzip-js',\n    Base64 = 'base64',\n}\n\n// Request types - these should be kept minimal to what request.ts needs\n\n// Minimal class to allow interop between different request methods (xhr / fetch)\nexport interface RequestResponse {\n    statusCode: number\n    text?: string\n    json?: any\n}\n\nexport type RequestCallback = (response: RequestResponse) => void\n\n// See https://nextjs.org/docs/app/api-reference/functions/fetch#fetchurl-options\ntype NextOptions = { revalidate: false | 0 | number; tags: string[] }\n\nexport interface RequestWithOptions {\n    url: string\n    // Data can be a single object or an array of objects when batched\n    data?: Record<string, any> | Record<string, any>[]\n    headers?: Record<string, any>\n    transport?: 'XHR' | 'fetch' | 'sendBeacon'\n    method?: 'POST' | 'GET'\n    urlQueryArgs?: { compression: Compression }\n    callback?: RequestCallback\n    timeout?: number\n    noRetries?: boolean\n    compression?: Compression | 'best-available'\n    fetchOptions?: {\n        cache?: RequestInit['cache']\n        next?: NextOptions\n    }\n}\n\n// Queued request types - the same as a request but with additional queueing information\n\nexport interface QueuedRequestWithOptions extends RequestWithOptions {\n    /** key of queue, e.g. 'sessionRecording' vs 'event' */\n    batchKey?: string\n}\n\n// Used explicitly for retriable requests\nexport interface RetriableRequestWithOptions extends QueuedRequestWithOptions {\n    retriesPerformedSoFar?: number\n}\n\n// we used to call a request that was sent to the queue with options attached `RequestQueueOptions`\n// so we can't call the options used to configure the behavior of the RequestQueue that as well,\n// so instead we call them config\nexport interface RequestQueueConfig {\n    /**\n     *  ADVANCED - alters the frequency which PostHog sends events to the server.\n     *  generally speaking this is only set when apps have automatic page refreshes, or very short visits.\n     *  Defaults to 3 seconds when not set\n     *  Allowed values between 250 and 5000\n     * */\n    flush_interval_ms?: number\n}\n\nexport interface CaptureOptions {\n    /**\n     * Used when `$identify` is called\n     * Will set person properties overriding previous values\n     */\n    $set?: Properties\n\n    /**\n     * Used when `$identify` is called\n     * Will set person properties but only once, it will NOT override previous values\n     */\n    $set_once?: Properties\n\n    /**\n     * Used to override the desired endpoint for the captured event\n     */\n    _url?: string\n\n    /**\n     * key of queue, e.g. 'sessionRecording' vs 'event'\n     */\n    _batchKey?: string\n\n    /**\n     * If set, overrides and disables config.properties_string_max_length\n     */\n    _noTruncate?: boolean\n\n    /**\n     * If set, skips the batched queue\n     */\n    send_instantly?: boolean\n\n    /**\n     * If set, skips the client side rate limiting\n     */\n    skip_client_rate_limiting?: boolean\n\n    /**\n     * If set, overrides the desired transport method\n     */\n    transport?: RequestWithOptions['transport']\n\n    /**\n     * If set, overrides the current timestamp\n     */\n    timestamp?: Date\n}\n\nexport type FlagVariant = { flag: string; variant: string }\n\nexport type SessionRecordingCanvasOptions = {\n    /**\n     * If set, records the canvas\n     *\n     * @default false\n     */\n    recordCanvas?: boolean | null\n\n    /**\n     * If set, records the canvas at the given FPS\n     * Can be set in the remote configuration\n     * Limited between 0 and 12\n     * When canvas recording is enabled, if this is not set locally, then remote config sets this as 4\n     *\n     * @default null-ish\n     */\n    canvasFps?: number | null\n\n    /**\n     * If set, records the canvas at the given quality\n     * Can be set in the remote configuration\n     * Must be a string that is a valid decimal between 0 and 1\n     * When canvas recording is enabled, if this is not set locally, then remote config sets this as \"0.4\"\n     *\n     * @default null-ish\n     */\n    canvasQuality?: string | null\n}\n\n/**\n * Remote configuration for the PostHog instance\n *\n * All of these settings can be configured directly in your PostHog instance\n * Any configuration set in the client overrides the information from the server\n */\nexport interface RemoteConfig {\n    /**\n     * Supported compression algorithms\n     */\n    supportedCompression: Compression[]\n\n    /**\n     * If set, disables autocapture\n     */\n    autocapture_opt_out?: boolean\n\n    /**\n     *     originally capturePerformance was replay only and so boolean true\n     *     is equivalent to { network_timing: true }\n     *     now capture performance can be separately enabled within replay\n     *     and as a standalone web vitals tracker\n     *     people can have them enabled separately\n     *     they work standalone but enhance each other\n     *     TODO: deprecate this so we make a new config that doesn't need this explanation\n     */\n    capturePerformance?: boolean | PerformanceCaptureConfig\n\n    /**\n     * Whether we should use a custom endpoint for analytics\n     *\n     * @default { endpoint: \"/e\" }\n     */\n    analytics?: {\n        endpoint?: string\n    }\n\n    /**\n     * Whether the `$elements_chain` property should be sent as a string or as an array\n     *\n     * @default false\n     */\n    elementsChainAsString?: boolean\n\n    /**\n     * This is currently in development and may have breaking changes without a major version bump\n     */\n    autocaptureExceptions?: boolean | { endpoint?: string }\n\n    /**\n     * Session recording configuration options\n     */\n    sessionRecording?: SessionRecordingCanvasOptions & {\n        endpoint?: string\n        consoleLogRecordingEnabled?: boolean\n        // the API returns a decimal between 0 and 1 as a string\n        sampleRate?: string | null\n        minimumDurationMilliseconds?: number\n        linkedFlag?: string | FlagVariant | null\n        networkPayloadCapture?: Pick<NetworkRecordOptions, 'recordBody' | 'recordHeaders'>\n        masking?: Pick<SessionRecordingOptions, 'maskAllInputs' | 'maskTextSelector'>\n        urlTriggers?: SessionRecordingUrlTrigger[]\n        scriptConfig?: { script?: string | undefined }\n        urlBlocklist?: SessionRecordingUrlTrigger[]\n        eventTriggers?: string[]\n        /**\n         * Controls how event, url, sampling, and linked flag triggers are combined\n         *\n         * `any` means that if any of the triggers match, the session will be recorded\n         * `all` means that all the triggers must match for the session to be recorded\n         *\n         * originally it was (event || url) && (sampling || linked flag)\n         * which nobody wanted, now the default is all\n         */\n        triggerMatchType?: 'any' | 'all'\n    }\n\n    /**\n     * Whether surveys are enabled\n     */\n    surveys?: boolean | Survey[]\n\n    /**\n     * Parameters for the toolbar\n     */\n    toolbarParams: ToolbarParams\n\n    /**\n     * @deprecated renamed to toolbarParams, still present on older API responses\n     */\n    editorParams?: ToolbarParams\n\n    /**\n     * @deprecated, moved to toolbarParams\n     */\n    toolbarVersion: 'toolbar'\n\n    /**\n     * Whether the user is authenticated\n     */\n    isAuthenticated: boolean\n\n    /**\n     * List of site apps with their IDs and URLs\n     */\n    siteApps: { id: string; url: string }[]\n\n    /**\n     * Whether heatmaps are enabled\n     */\n    heatmaps?: boolean\n\n    /**\n     * Whether to only capture identified users by default\n     */\n    defaultIdentifiedOnly?: boolean\n\n    /**\n     * Whether to capture dead clicks\n     */\n    captureDeadClicks?: boolean\n\n    /**\n     * Indicates if the team has any flags enabled (if not we don't need to load them)\n     */\n    hasFeatureFlags?: boolean\n}\n\n/**\n * Decide returns everything we have on the remote config plus feature flags and their payloads\n */\nexport interface DecideResponse extends RemoteConfig {\n    featureFlags: Record<string, string | boolean>\n    featureFlagPayloads: Record<string, JsonType>\n    errorsWhileComputingFlags: boolean\n    requestId?: string\n    flags: Record<string, FeatureFlagDetail>\n}\n\nexport type SiteAppGlobals = {\n    event: {\n        uuid: string\n        event: EventName\n        properties: Properties\n        timestamp?: Date\n        elements_chain?: string\n        distinct_id?: string\n    }\n    person: {\n        properties: Properties\n    }\n    groups: Record<string, { id: string; type: string; properties: Properties }>\n}\n\nexport type SiteAppLoader = {\n    id: string\n    init: (config: { posthog: PostHog; callback: (success: boolean) => void }) => {\n        processEvent?: (globals: SiteAppGlobals) => void\n    }\n}\n\nexport type SiteApp = {\n    id: string\n    loaded: boolean\n    errored: boolean\n    processedBuffer: boolean\n    processEvent?: (globals: SiteAppGlobals) => void\n}\n\nexport type FeatureFlagsCallback = (\n    flags: string[],\n    variants: Record<string, string | boolean>,\n    context?: {\n        errorsLoading?: boolean\n    }\n) => void\n\nexport type FeatureFlagDetail = {\n    key: string\n    enabled: boolean\n    // Only used when overriding a flag payload.\n    original_enabled?: boolean | undefined\n    variant: string | undefined\n    // Only used when overriding a flag payload.\n    original_variant?: string | undefined\n    reason: EvaluationReason | undefined\n    metadata: FeatureFlagMetadata | undefined\n}\n\nexport type FeatureFlagMetadata = {\n    id: number\n    version: number | undefined\n    description: string | undefined\n    payload: JsonType | undefined\n    // Only used when overriding a flag payload.\n    original_payload?: JsonType | undefined\n}\n\nexport type EvaluationReason = {\n    code: string\n    condition_index: number | undefined\n    description: string | undefined\n}\n\nexport type RemoteConfigFeatureFlagCallback = (payload: JsonType) => void\n\nexport interface PersistentStore {\n    _is_supported: () => boolean\n    _error: (error: any) => void\n    _parse: (name: string) => any\n    _get: (name: string) => any\n    _set: (\n        name: string,\n        value: any,\n        expire_days?: number | null,\n        cross_subdomain?: boolean,\n        secure?: boolean,\n        debug?: boolean\n    ) => void\n    _remove: (name: string, cross_subdomain?: boolean) => void\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport type Breaker = {}\nexport type EventHandler = (event: Event) => boolean | void\n\nexport type ToolbarUserIntent = 'add-action' | 'edit-action'\nexport type ToolbarSource = 'url' | 'localstorage'\nexport type ToolbarVersion = 'toolbar'\n\n/* sync with posthog */\nexport interface ToolbarParams {\n    token?: string /** public posthog-js token */\n    temporaryToken?: string /** private temporary user token */\n    actionId?: number\n    userIntent?: ToolbarUserIntent\n    source?: ToolbarSource\n    toolbarVersion?: ToolbarVersion\n    instrument?: boolean\n    distinctId?: string\n    userEmail?: string\n    dataAttributes?: string[]\n    featureFlags?: Record<string, string | boolean>\n}\n\nexport type SnippetArrayItem = [method: string, ...args: any[]]\n\nexport type JsonRecord = { [key: string]: JsonType }\nexport type JsonType = string | number | boolean | null | undefined | JsonRecord | Array<JsonType>\n\n/** A feature that isn't publicly available yet.*/\nexport interface EarlyAccessFeature {\n    // Sync this with the backend's EarlyAccessFeatureSerializer!\n    name: string\n    description: string\n    stage: 'concept' | 'alpha' | 'beta'\n    documentationUrl: string | null\n    flagKey: string | null\n}\n\nexport type EarlyAccessFeatureStage = 'concept' | 'alpha' | 'beta' | 'general-availability'\nexport type EarlyAccessFeatureCallback = (earlyAccessFeatures: EarlyAccessFeature[]) => void\n\nexport interface EarlyAccessFeatureResponse {\n    earlyAccessFeatures: EarlyAccessFeature[]\n}\n\nexport type Headers = Record<string, string>\n\n/* for rrweb/network@1\n ** when that is released as part of rrweb this can be removed\n ** don't rely on this type, it may change without notice\n */\nexport type InitiatorType =\n    | 'audio'\n    | 'beacon'\n    | 'body'\n    | 'css'\n    | 'early-hint'\n    | 'embed'\n    | 'fetch'\n    | 'frame'\n    | 'iframe'\n    | 'icon'\n    | 'image'\n    | 'img'\n    | 'input'\n    | 'link'\n    | 'navigation'\n    | 'object'\n    | 'ping'\n    | 'script'\n    | 'track'\n    | 'video'\n    | 'xmlhttprequest'\n\nexport type NetworkRecordOptions = {\n    initiatorTypes?: InitiatorType[]\n    maskRequestFn?: (data: CapturedNetworkRequest) => CapturedNetworkRequest | undefined\n    recordHeaders?: boolean | { request: boolean; response: boolean }\n    recordBody?: boolean | string[] | { request: boolean | string[]; response: boolean | string[] }\n    recordInitialRequests?: boolean\n    /**\n     * whether to record PerformanceEntry events for network requests\n     */\n    recordPerformance?: boolean\n    /**\n     * the PerformanceObserver will only observe these entry types\n     */\n    performanceEntryTypeToObserve: string[]\n    /**\n     * the maximum size of the request/response body to record\n     * NB this will be at most 1MB even if set larger\n     */\n    payloadSizeLimitBytes: number\n    /**\n     * some domains we should never record the payload\n     * for example other companies session replay ingestion payloads aren't super useful but are gigantic\n     * if this isn't provided we use a default list\n     * if this is provided - we add the provided list to the default list\n     * i.e. we never record the payloads on the default deny list\n     */\n    payloadHostDenyList?: string[]\n}\n\n/** @deprecated - use CapturedNetworkRequest instead  */\nexport type NetworkRequest = {\n    url: string\n}\n\n// In rrweb this is called NetworkRequest, but we already exposed that as having only URL\n// we also want to vary from the rrweb NetworkRequest because we want to include\n// all PerformanceEntry properties too.\n// that has 4 required properties\n//     readonly duration: DOMHighResTimeStamp;\n//     readonly entryType: string;\n//     readonly name: string;\n//     readonly startTime: DOMHighResTimeStamp;\n// NB: properties below here are ALPHA, don't rely on them, they may change without notice\n\n// we mirror PerformanceEntry since we read into this type from a PerformanceObserver,\n// but we don't want to inherit its readonly-iness\ntype Writable<T> = { -readonly [P in keyof T]: T[P] }\n\nexport type CapturedNetworkRequest = Writable<Omit<PerformanceEntry, 'toJSON'>> & {\n    // properties below here are ALPHA, don't rely on them, they may change without notice\n    method?: string\n    initiatorType?: InitiatorType\n    status?: number\n    timeOrigin?: number\n    timestamp?: number\n    startTime?: number\n    endTime?: number\n    requestHeaders?: Headers\n    requestBody?: string | null\n    responseHeaders?: Headers\n    responseBody?: string | null\n    // was this captured before fetch/xhr could have been wrapped\n    isInitial?: boolean\n}\n\nexport type ErrorEventArgs = [\n    event: string | Event,\n    source?: string | undefined,\n    lineno?: number | undefined,\n    colno?: number | undefined,\n    error?: Error | undefined,\n]\n\n// levels originally copied from Sentry to work with the sentry integration\n// and to avoid relying on a frequently changing @sentry/types dependency\n// but provided as an array of literal types, so we can constrain the level below\nexport const severityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'] as const\nexport declare type SeverityLevel = (typeof severityLevels)[number]\n\nexport interface ErrorProperties {\n    $exception_type: string\n    $exception_message: string\n    $exception_level: SeverityLevel\n    $exception_source?: string\n    $exception_lineno?: number\n    $exception_colno?: number\n    $exception_DOMException_code?: string\n    $exception_is_synthetic?: boolean\n    $exception_stack_trace_raw?: string\n    $exception_handled?: boolean\n    $exception_personURL?: string\n}\n\nexport interface ErrorConversions {\n    errorToProperties: (args: ErrorEventArgs) => ErrorProperties\n    unhandledRejectionToProperties: (args: [ev: PromiseRejectionEvent]) => ErrorProperties\n}\n\nexport interface SessionRecordingUrlTrigger {\n    url: string\n    matching: 'regex'\n}\n","import { window } from './globals'\nimport { knownUnsafeEditableEvent, KnownUnsafeEditableEvent } from '../types'\nimport { includes } from './string-utils'\n\n// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\n\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const isFunction = (x: unknown): x is (...args: any[]) => any => {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof x === 'function'\n}\n\nexport const isNativeFunction = (x: unknown): x is (...args: any[]) => any =>\n    isFunction(x) && x.toString().indexOf('[native code]') !== -1\n\n// When angular patches functions they pass the above `isNativeFunction` check (at least the MutationObserver)\nexport const isAngularZonePresent = (): boolean => {\n    return !!(window as any).Zone\n}\n\n// Underscore Addons\nexport const isObject = (x: unknown): x is Record<string, any> => {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !isArray(x)\n}\nexport const isEmptyObject = (x: unknown) => {\n    if (isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const isUndefined = (x: unknown): x is undefined => x === void 0\n\nexport const isString = (x: unknown): x is string => {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const isEmptyString = (x: unknown): boolean => isString(x) && x.trim().length === 0\n\nexport const isNull = (x: unknown): x is null => {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\n\n/*\n    sometimes you want to check if something is null or undefined\n    that's what this is for\n */\nexport const isNullish = (x: unknown): x is null | undefined => isUndefined(x) || isNull(x)\n\nexport const isNumber = (x: unknown): x is number => {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const isBoolean = (x: unknown): x is boolean => {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n\nexport const isDocument = (x: unknown): x is Document => {\n    // eslint-disable-next-line posthog-js/no-direct-document-check\n    return x instanceof Document\n}\n\nexport const isFormData = (x: unknown): x is FormData => {\n    // eslint-disable-next-line posthog-js/no-direct-form-data-check\n    return x instanceof FormData\n}\n\nexport const isFile = (x: unknown): x is File => {\n    // eslint-disable-next-line posthog-js/no-direct-file-check\n    return x instanceof File\n}\n\nexport const isError = (x: unknown): x is Error => {\n    return x instanceof Error\n}\n\nexport const isKnownUnsafeEditableEvent = (x: unknown): x is KnownUnsafeEditableEvent => {\n    return includes(knownUnsafeEditableEvent as unknown as string[], x)\n}\n","import Config from '../config'\nimport { isUndefined } from './type-utils'\nimport { assignableWindow, window } from './globals'\n\nexport type Logger = {\n    _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => void\n    info: (...args: any[]) => void\n    warn: (...args: any[]) => void\n    error: (...args: any[]) => void\n    critical: (...args: any[]) => void\n    uninitializedWarning: (methodName: string) => void\n    createLogger: (prefix: string) => Logger\n}\n\nconst _createLogger = (prefix: string): Logger => {\n    const logger: Logger = {\n        _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => {\n            if (\n                window &&\n                (Config.DEBUG || assignableWindow.POSTHOG_DEBUG) &&\n                !isUndefined(window.console) &&\n                window.console\n            ) {\n                const consoleLog =\n                    '__rrweb_original__' in window.console[level]\n                        ? (window.console[level] as any)['__rrweb_original__']\n                        : window.console[level]\n\n                // eslint-disable-next-line no-console\n                consoleLog(prefix, ...args)\n            }\n        },\n\n        info: (...args: any[]) => {\n            logger._log('log', ...args)\n        },\n\n        warn: (...args: any[]) => {\n            logger._log('warn', ...args)\n        },\n\n        error: (...args: any[]) => {\n            logger._log('error', ...args)\n        },\n\n        critical: (...args: any[]) => {\n            // Critical errors are always logged to the console\n            // eslint-disable-next-line no-console\n            console.error(prefix, ...args)\n        },\n\n        uninitializedWarning: (methodName: string) => {\n            logger.error(`You must initialize PostHog before calling ${methodName}`)\n        },\n\n        createLogger: (additionalPrefix: string) => _createLogger(`${prefix} ${additionalPrefix}`),\n    }\n    return logger\n}\n\nexport const logger = _createLogger('[PostHog.js]')\n\nexport const createLogger = logger.createLogger\n","import { Breaker, Properties } from '../types'\nimport { nativeForEach, nativeIndexOf } from './globals'\nimport { logger } from './logger'\nimport { hasOwnProperty, isArray, isFormData, isNull, isNullish, isNumber, isString } from './type-utils'\n\nconst breaker: Breaker = {}\n\nexport function eachArray<E = any>(\n    obj: E[] | null | undefined,\n    iterator: (value: E, key: number) => void | Breaker,\n    thisArg?: any\n): void {\n    if (isArray(obj)) {\n        if (nativeForEach && obj.forEach === nativeForEach) {\n            obj.forEach(iterator, thisArg)\n        } else if ('length' in obj && obj.length === +obj.length) {\n            for (let i = 0, l = obj.length; i < l; i++) {\n                if (i in obj && iterator.call(thisArg, obj[i], i) === breaker) {\n                    return\n                }\n            }\n        }\n    }\n}\n\n/**\n * @param {*=} obj\n * @param {function(...*)=} iterator\n * @param {Object=} thisArg\n */\nexport function each(obj: any, iterator: (value: any, key: any) => void | Breaker, thisArg?: any): void {\n    if (isNullish(obj)) {\n        return\n    }\n    if (isArray(obj)) {\n        return eachArray(obj, iterator, thisArg)\n    }\n    if (isFormData(obj)) {\n        for (const pair of obj.entries()) {\n            if (iterator.call(thisArg, pair[1], pair[0]) === breaker) {\n                return\n            }\n        }\n        return\n    }\n    for (const key in obj) {\n        if (hasOwnProperty.call(obj, key)) {\n            if (iterator.call(thisArg, obj[key], key) === breaker) {\n                return\n            }\n        }\n    }\n}\n\nexport const extend = function (obj: Record<string, any>, ...args: Record<string, any>[]): Record<string, any> {\n    eachArray(args, function (source) {\n        for (const prop in source) {\n            if (source[prop] !== void 0) {\n                obj[prop] = source[prop]\n            }\n        }\n    })\n    return obj\n}\n\nexport const extendArray = function <T>(obj: T[], ...args: T[][]): T[] {\n    eachArray(args, function (source) {\n        eachArray(source, function (item) {\n            obj.push(item)\n        })\n    })\n    return obj\n}\n\nexport const include = function (\n    obj: null | string | Array<any> | Record<string, any>,\n    target: any\n): boolean | Breaker {\n    let found = false\n    if (isNull(obj)) {\n        return found\n    }\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) {\n        return obj.indexOf(target) != -1\n    }\n    each(obj, function (value) {\n        if (found || (found = value === target)) {\n            return breaker\n        }\n        return\n    })\n    return found\n}\n\n/**\n * Object.entries() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n */\nexport function entries<T = any>(obj: Record<string, T>): [string, T][] {\n    const ownProps = Object.keys(obj)\n    let i = ownProps.length\n    const resArray = new Array(i) // preallocate the Array\n\n    while (i--) {\n        resArray[i] = [ownProps[i], obj[ownProps[i]]]\n    }\n    return resArray\n}\n\nexport const trySafe = function <T>(fn: () => T): T | undefined {\n    try {\n        return fn()\n    } catch {\n        return undefined\n    }\n}\n\nexport const safewrap = function <F extends (...args: any[]) => any = (...args: any[]) => any>(f: F): F {\n    return function (...args) {\n        try {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            return f.apply(this, args)\n        } catch (e) {\n            logger.critical(\n                'Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A.'\n            )\n            logger.critical(e)\n        }\n    } as F\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const safewrapClass = function (klass: Function, functions: string[]): void {\n    for (let i = 0; i < functions.length; i++) {\n        klass.prototype[functions[i]] = safewrap(klass.prototype[functions[i]])\n    }\n}\n\nexport const stripEmptyProperties = function (p: Properties): Properties {\n    const ret: Properties = {}\n    each(p, function (v, k) {\n        if ((isString(v) && v.length > 0) || isNumber(v)) {\n            ret[k] = v\n        }\n    })\n    return ret\n}\n\n/**\n * Deep copies an object.\n * It handles cycles by replacing all references to them with `undefined`\n * Also supports customizing native values\n *\n * @param value\n * @param customizer\n * @returns {{}|undefined|*}\n */\nfunction deepCircularCopy<T extends Record<string, any> = Record<string, any>>(\n    value: T,\n    customizer?: <K extends keyof T = keyof T>(value: T[K], key?: K) => T[K]\n): T | undefined {\n    const COPY_IN_PROGRESS_SET = new Set()\n\n    function internalDeepCircularCopy(value: T, key?: string): T | undefined {\n        if (value !== Object(value)) return customizer ? customizer(value as any, key) : value // primitive value\n\n        if (COPY_IN_PROGRESS_SET.has(value)) return undefined\n        COPY_IN_PROGRESS_SET.add(value)\n        let result: T\n\n        if (isArray(value)) {\n            result = [] as any as T\n            eachArray(value, (it) => {\n                result.push(internalDeepCircularCopy(it))\n            })\n        } else {\n            result = {} as T\n            each(value, (val, key) => {\n                if (!COPY_IN_PROGRESS_SET.has(val)) {\n                    ;(result as any)[key] = internalDeepCircularCopy(val, key)\n                }\n            })\n        }\n        return result\n    }\n    return internalDeepCircularCopy(value)\n}\n\nexport function _copyAndTruncateStrings<T extends Record<string, any> = Record<string, any>>(\n    object: T,\n    maxStringLength: number | null\n): T {\n    return deepCircularCopy(object, (value: any) => {\n        if (isString(value) && !isNull(maxStringLength)) {\n            return (value as string).slice(0, maxStringLength)\n        }\n        return value\n    }) as T\n}\n\n// NOTE: Update PostHogConfig docs if you change this list\n// We will not try to catch all bullets here, but we should make an effort to catch the most common ones\n// You should be highly against adding more to this list, because ultimately customers can configure\n// their `cross_subdomain_cookie` setting to anything they want.\nconst EXCLUDED_FROM_CROSS_SUBDOMAIN_COOKIE = ['herokuapp.com', 'vercel.app', 'netlify.app']\nexport function isCrossDomainCookie(documentLocation: Location | undefined) {\n    const hostname = documentLocation?.hostname\n\n    if (!isString(hostname)) {\n        return false\n    }\n    // split and slice isn't a great way to match arbitrary domains,\n    // but it's good enough for ensuring we only match herokuapp.com when it is the TLD\n    // for the hostname\n    const lastTwoParts = hostname.split('.').slice(-2).join('.')\n\n    for (const excluded of EXCLUDED_FROM_CROSS_SUBDOMAIN_COOKIE) {\n        if (lastTwoParts === excluded) {\n            return false\n        }\n    }\n\n    return true\n}\n\nexport function find<T>(value: T[], predicate: (value: T) => boolean): T | undefined {\n    for (let i = 0; i < value.length; i++) {\n        if (predicate(value[i])) {\n            return value[i]\n        }\n    }\n    return undefined\n}\n\n// Use this instead of element.addEventListener to avoid eslint errors\n// this properly implements the default options for passive event listeners\nexport function addEventListener(\n    element: Window | Document | Element | undefined,\n    event: string,\n    callback: EventListener,\n    options?: AddEventListenerOptions\n): void {\n    const { capture = false, passive = true } = options ?? {}\n\n    // This is the only place where we are allowed to call this function\n    // because the whole idea is that we should be calling this instead of the built-in one\n    // eslint-disable-next-line posthog-js/no-add-event-listener\n    element?.addEventListener(event, callback, { capture, passive })\n}\n","import { Survey } from '../posthog-surveys-types'\nimport { createLogger } from '../utils/logger'\n\nexport const SURVEY_LOGGER = createLogger('[Surveys]')\n\nexport function isSurveyRunning(survey: Survey): boolean {\n    return !!(survey.start_date && !survey.end_date)\n}\n\nexport function doesSurveyActivateByEvent(survey: Pick<Survey, 'conditions'>): boolean {\n    return !!survey.conditions?.events?.values?.length\n}\n\nexport function doesSurveyActivateByAction(survey: Pick<Survey, 'conditions'>): boolean {\n    return !!survey.conditions?.actions?.values?.length\n}\n\nexport const SURVEY_SEEN_PREFIX = 'seenSurvey_'\nexport const SURVEY_IN_PROGRESS_PREFIX = 'inProgressSurvey_'\n","/**\n * uuidv7: An experimental implementation of the proposed UUID Version 7\n *\n * @license Apache-2.0\n * @copyright 2021-2023 LiosK\n * @packageDocumentation\n *\n * from https://github.com/LiosK/uuidv7/blob/e501462ea3d23241de13192ceae726956f9b3b7d/src/index.ts\n */\n\n// polyfill for IE11\nimport { window } from './utils/globals'\n\nimport { isNumber, isUndefined } from './utils/type-utils'\n\nif (!Math.trunc) {\n    Math.trunc = function (v) {\n        return v < 0 ? Math.ceil(v) : Math.floor(v)\n    }\n}\n\n// polyfill for IE11\nif (!Number.isInteger) {\n    Number.isInteger = function (value) {\n        return isNumber(value) && isFinite(value) && Math.floor(value) === value\n    }\n}\n\nconst DIGITS = '0123456789abcdef'\n\n/** Represents a UUID as a 16-byte byte array. */\nexport class UUID {\n    /** @param bytes - The 16-byte byte array representation. */\n    constructor(readonly bytes: Readonly<Uint8Array>) {\n        if (bytes.length !== 16) {\n            throw new TypeError('not 128-bit length')\n        }\n    }\n\n    /**\n     * Builds a byte array from UUIDv7 field values.\n     *\n     * @param unixTsMs - A 48-bit `unix_ts_ms` field value.\n     * @param randA - A 12-bit `rand_a` field value.\n     * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.\n     * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.\n     */\n    static fromFieldsV7(unixTsMs: number, randA: number, randBHi: number, randBLo: number): UUID {\n        if (\n            !Number.isInteger(unixTsMs) ||\n            !Number.isInteger(randA) ||\n            !Number.isInteger(randBHi) ||\n            !Number.isInteger(randBLo) ||\n            unixTsMs < 0 ||\n            randA < 0 ||\n            randBHi < 0 ||\n            randBLo < 0 ||\n            unixTsMs > 0xffff_ffff_ffff ||\n            randA > 0xfff ||\n            randBHi > 0x3fff_ffff ||\n            randBLo > 0xffff_ffff\n        ) {\n            throw new RangeError('invalid field value')\n        }\n\n        const bytes = new Uint8Array(16)\n        bytes[0] = unixTsMs / 2 ** 40\n        bytes[1] = unixTsMs / 2 ** 32\n        bytes[2] = unixTsMs / 2 ** 24\n        bytes[3] = unixTsMs / 2 ** 16\n        bytes[4] = unixTsMs / 2 ** 8\n        bytes[5] = unixTsMs\n        bytes[6] = 0x70 | (randA >>> 8)\n        bytes[7] = randA\n        bytes[8] = 0x80 | (randBHi >>> 24)\n        bytes[9] = randBHi >>> 16\n        bytes[10] = randBHi >>> 8\n        bytes[11] = randBHi\n        bytes[12] = randBLo >>> 24\n        bytes[13] = randBLo >>> 16\n        bytes[14] = randBLo >>> 8\n        bytes[15] = randBLo\n        return new UUID(bytes)\n    }\n\n    /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */\n    toString(): string {\n        let text = ''\n        for (let i = 0; i < this.bytes.length; i++) {\n            text = text + DIGITS.charAt(this.bytes[i] >>> 4) + DIGITS.charAt(this.bytes[i] & 0xf)\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\n                text += '-'\n            }\n        }\n\n        if (text.length !== 36) {\n            // We saw one customer whose bundling code was mangling the UUID generation\n            // rather than accept a bad UUID, we throw an error here.\n            throw new Error('Invalid UUIDv7 was generated')\n        }\n        return text\n    }\n\n    /** Creates an object from `this`. */\n    clone(): UUID {\n        return new UUID(this.bytes.slice(0))\n    }\n\n    /** Returns true if `this` is equivalent to `other`. */\n    equals(other: UUID): boolean {\n        return this.compareTo(other) === 0\n    }\n\n    /**\n     * Returns a negative integer, zero, or positive integer if `this` is less\n     * than, equal to, or greater than `other`, respectively.\n     */\n    compareTo(other: UUID): number {\n        for (let i = 0; i < 16; i++) {\n            const diff = this.bytes[i] - other.bytes[i]\n            if (diff !== 0) {\n                return Math.sign(diff)\n            }\n        }\n        return 0\n    }\n}\n\n/** Encapsulates the monotonic counter state. */\nclass V7Generator {\n    private _timestamp = 0\n    private _counter = 0\n    private readonly _random = new DefaultRandom()\n\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or resets the\n     * generator upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method resets the generator and returns a new\n     * UUID based on the current timestamp.\n     */\n    generate(): UUID {\n        const value = this.generateOrAbort()\n        if (!isUndefined(value)) {\n            return value\n        } else {\n            // reset state and resume\n            this._timestamp = 0\n            const valueAfterReset = this.generateOrAbort()\n            if (isUndefined(valueAfterReset)) {\n                throw new Error('Could not generate UUID after timestamp reset')\n            }\n            return valueAfterReset\n        }\n    }\n\n    /**\n     * Generates a new UUIDv7 object from the current timestamp, or returns\n     * `undefined` upon significant timestamp rollback.\n     *\n     * This method returns monotonically increasing UUIDs unless the up-to-date\n     * timestamp is significantly (by ten seconds or more) smaller than the one\n     * embedded in the immediately preceding UUID. If such a significant clock\n     * rollback is detected, this method aborts and returns `undefined`.\n     */\n    generateOrAbort(): UUID | undefined {\n        const MAX_COUNTER = 0x3ff_ffff_ffff\n        const ROLLBACK_ALLOWANCE = 10_000 // 10 seconds\n\n        const ts = Date.now()\n        if (ts > this._timestamp) {\n            this._timestamp = ts\n            this._resetCounter()\n        } else if (ts + ROLLBACK_ALLOWANCE > this._timestamp) {\n            // go on with previous timestamp if new one is not much smaller\n            this._counter++\n            if (this._counter > MAX_COUNTER) {\n                // increment timestamp at counter overflow\n                this._timestamp++\n                this._resetCounter()\n            }\n        } else {\n            // abort if clock went backwards to unbearable extent\n            return undefined\n        }\n\n        return UUID.fromFieldsV7(\n            this._timestamp,\n            Math.trunc(this._counter / 2 ** 30),\n            this._counter & (2 ** 30 - 1),\n            this._random.nextUint32()\n        )\n    }\n\n    /** Initializes the counter at a 42-bit random integer. */\n    private _resetCounter(): void {\n        this._counter = this._random.nextUint32() * 0x400 + (this._random.nextUint32() & 0x3ff)\n    }\n}\n\n/** A global flag to force use of cryptographically strong RNG. */\ndeclare const UUIDV7_DENY_WEAK_RNG: boolean\n\n/** Stores `crypto.getRandomValues()` available in the environment. */\nlet getRandomValues: <T extends Uint8Array | Uint32Array>(buffer: T) => T = (buffer) => {\n    // fall back on Math.random() unless the flag is set to true\n    // TRICKY: don't use the isUndefined method here as can't pass the reference\n    if (typeof UUIDV7_DENY_WEAK_RNG !== 'undefined' && UUIDV7_DENY_WEAK_RNG) {\n        throw new Error('no cryptographically strong RNG available')\n    }\n\n    for (let i = 0; i < buffer.length; i++) {\n        buffer[i] = Math.trunc(Math.random() * 0x1_0000) * 0x1_0000 + Math.trunc(Math.random() * 0x1_0000)\n    }\n    return buffer\n}\n\n// detect Web Crypto API\nif (window && !isUndefined(window.crypto) && crypto.getRandomValues) {\n    getRandomValues = (buffer) => crypto.getRandomValues(buffer)\n}\n\n/**\n * Wraps `crypto.getRandomValues()` and compatibles to enable buffering; this\n * uses a small buffer by default to avoid unbearable throughput decline in some\n * environments as well as the waste of time and space for unused values.\n */\nclass DefaultRandom {\n    private readonly _buffer = new Uint32Array(8)\n    private _cursor = Infinity\n    nextUint32(): number {\n        if (this._cursor >= this._buffer.length) {\n            getRandomValues(this._buffer)\n            this._cursor = 0\n        }\n        return this._buffer[this._cursor++]\n    }\n}\n\nlet defaultGenerator: V7Generator | undefined\n\n/**\n * Generates a UUIDv7 string.\n *\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\n */\nexport const uuidv7 = (): string => uuidv7obj().toString()\n\n/** Generates a UUIDv7 object. */\nconst uuidv7obj = (): UUID => (defaultGenerator || (defaultGenerator = new V7Generator())).generate()\n\nexport const uuid7ToTimestampMs = (uuid: string): number => {\n    // remove hyphens\n    const hex = uuid.replace(/-/g, '')\n    // ensure that it's a version 7 UUID\n    if (hex.length !== 32) {\n        throw new Error('Not a valid UUID')\n    }\n    if (hex[12] !== '7') {\n        throw new Error('Not a UUIDv7')\n    }\n    // the first 6 bytes are the timestamp, which means that we can read only the first 12 hex characters\n    return parseInt(hex.substring(0, 12), 16)\n}\n","import { PostHog } from '../../posthog-core'\nimport { createLogger } from '../../utils/logger'\n\nconst logger = createLogger('[Stylesheet Loader]')\n\nexport const prepareStylesheet = (document: Document, innerText: string, posthog?: PostHog) => {\n    // Forcing the existence of `document` requires this function to be called in a browser environment\n    let stylesheet: HTMLStyleElement | null = document.createElement('style')\n    stylesheet.innerText = innerText\n\n    if (posthog?.config?.prepare_external_dependency_stylesheet) {\n        stylesheet = posthog.config.prepare_external_dependency_stylesheet(stylesheet)\n    }\n\n    if (!stylesheet) {\n        logger.error('prepare_external_dependency_stylesheet returned null')\n        return null\n    }\n\n    return stylesheet\n}\n","export const isValidRegex = function (str: string): boolean {\n    try {\n        new RegExp(str)\n    } catch {\n        return false\n    }\n    return true\n}\n\nexport const isMatchingRegex = function (value: string, pattern: string): boolean {\n    if (!isValidRegex(pattern)) return false\n\n    try {\n        return new RegExp(pattern).test(value)\n    } catch {\n        return false\n    }\n}\n","import { isFunction, isUndefined } from './type-utils'\nimport { includes } from './string-utils'\n\n/**\n * this device detection code is (at time of writing) about 3% of the size of the entire library\n * this is mostly because the identifiers user in regexes and results can't be minified away since\n * they have meaning\n *\n * so, there are some pre-uglifying choices in the code to help reduce the size\n * e.g. many repeated strings are stored as variables and then old-fashioned concatenated together\n *\n * TL;DR here be dragons\n */\nconst FACEBOOK = 'Facebook'\nconst MOBILE = 'Mobile'\nconst IOS = 'iOS'\nconst ANDROID = 'Android'\nconst TABLET = 'Tablet'\nconst ANDROID_TABLET = ANDROID + ' ' + TABLET\nconst IPAD = 'iPad'\nconst APPLE = 'Apple'\nconst APPLE_WATCH = APPLE + ' Watch'\nconst SAFARI = 'Safari'\nconst BLACKBERRY = 'BlackBerry'\nconst SAMSUNG = 'Samsung'\nconst SAMSUNG_BROWSER = SAMSUNG + 'Browser'\nconst SAMSUNG_INTERNET = SAMSUNG + ' Internet'\nconst CHROME = 'Chrome'\nconst CHROME_OS = CHROME + ' OS'\nconst CHROME_IOS = CHROME + ' ' + IOS\nconst INTERNET_EXPLORER = 'Internet Explorer'\nconst INTERNET_EXPLORER_MOBILE = INTERNET_EXPLORER + ' ' + MOBILE\nconst OPERA = 'Opera'\nconst OPERA_MINI = OPERA + ' Mini'\nconst EDGE = 'Edge'\nconst MICROSOFT_EDGE = 'Microsoft ' + EDGE\nconst FIREFOX = 'Firefox'\nconst FIREFOX_IOS = FIREFOX + ' ' + IOS\nconst NINTENDO = 'Nintendo'\nconst PLAYSTATION = 'PlayStation'\nconst XBOX = 'Xbox'\nconst ANDROID_MOBILE = ANDROID + ' ' + MOBILE\nconst MOBILE_SAFARI = MOBILE + ' ' + SAFARI\nconst WINDOWS = 'Windows'\nconst WINDOWS_PHONE = WINDOWS + ' Phone'\nconst NOKIA = 'Nokia'\nconst OUYA = 'Ouya'\nconst GENERIC = 'Generic'\nconst GENERIC_MOBILE = GENERIC + ' ' + MOBILE.toLowerCase()\nconst GENERIC_TABLET = GENERIC + ' ' + TABLET.toLowerCase()\nconst KONQUEROR = 'Konqueror'\n\nconst BROWSER_VERSION_REGEX_SUFFIX = '(\\\\d+(\\\\.\\\\d+)?)'\nconst DEFAULT_BROWSER_VERSION_REGEX = new RegExp('Version/' + BROWSER_VERSION_REGEX_SUFFIX)\n\nconst XBOX_REGEX = new RegExp(XBOX, 'i')\nconst PLAYSTATION_REGEX = new RegExp(PLAYSTATION + ' \\\\w+', 'i')\nconst NINTENDO_REGEX = new RegExp(NINTENDO + ' \\\\w+', 'i')\nconst BLACKBERRY_REGEX = new RegExp(BLACKBERRY + '|PlayBook|BB10', 'i')\n\nconst windowsVersionMap: Record<string, string> = {\n    'NT3.51': 'NT 3.11',\n    'NT4.0': 'NT 4.0',\n    '5.0': '2000',\n    '5.1': 'XP',\n    '5.2': 'XP',\n    '6.0': 'Vista',\n    '6.1': '7',\n    '6.2': '8',\n    '6.3': '8.1',\n    '6.4': '10',\n    '10.0': '10',\n}\n\n/**\n * Safari detection turns out to be complicated. For e.g. https://stackoverflow.com/a/29696509\n * We can be slightly loose because some options have been ruled out (e.g. firefox on iOS)\n * before this check is made\n */\nfunction isSafari(userAgent: string): boolean {\n    return includes(userAgent, SAFARI) && !includes(userAgent, CHROME) && !includes(userAgent, ANDROID)\n}\n\nconst safariCheck = (ua: string, vendor?: string) => (vendor && includes(vendor, APPLE)) || isSafari(ua)\n\n/**\n * This function detects which browser is running this script.\n * The order of the checks are important since many user agents\n * include keywords used in later checks.\n */\nexport const detectBrowser = function (user_agent: string, vendor: string | undefined): string {\n    vendor = vendor || '' // vendor is undefined for at least IE9\n\n    if (includes(user_agent, ' OPR/') && includes(user_agent, 'Mini')) {\n        return OPERA_MINI\n    } else if (includes(user_agent, ' OPR/')) {\n        return OPERA\n    } else if (BLACKBERRY_REGEX.test(user_agent)) {\n        return BLACKBERRY\n    } else if (includes(user_agent, 'IE' + MOBILE) || includes(user_agent, 'WPDesktop')) {\n        return INTERNET_EXPLORER_MOBILE\n    }\n    // https://developer.samsung.com/internet/user-agent-string-format\n    else if (includes(user_agent, SAMSUNG_BROWSER)) {\n        return SAMSUNG_INTERNET\n    } else if (includes(user_agent, EDGE) || includes(user_agent, 'Edg/')) {\n        return MICROSOFT_EDGE\n    } else if (includes(user_agent, 'FBIOS')) {\n        return FACEBOOK + ' ' + MOBILE\n    } else if (includes(user_agent, 'UCWEB') || includes(user_agent, 'UCBrowser')) {\n        return 'UC Browser'\n    } else if (includes(user_agent, 'CriOS')) {\n        return CHROME_IOS // why not just Chrome?\n    } else if (includes(user_agent, 'CrMo')) {\n        return CHROME\n    } else if (includes(user_agent, CHROME)) {\n        return CHROME\n    } else if (includes(user_agent, ANDROID) && includes(user_agent, SAFARI)) {\n        return ANDROID_MOBILE\n    } else if (includes(user_agent, 'FxiOS')) {\n        return FIREFOX_IOS\n    } else if (includes(user_agent.toLowerCase(), KONQUEROR.toLowerCase())) {\n        return KONQUEROR\n    } else if (safariCheck(user_agent, vendor)) {\n        return includes(user_agent, MOBILE) ? MOBILE_SAFARI : SAFARI\n    } else if (includes(user_agent, FIREFOX)) {\n        return FIREFOX\n    } else if (includes(user_agent, 'MSIE') || includes(user_agent, 'Trident/')) {\n        return INTERNET_EXPLORER\n    } else if (includes(user_agent, 'Gecko')) {\n        return FIREFOX\n    }\n\n    return ''\n}\n\nconst versionRegexes: Record<string, RegExp[]> = {\n    [INTERNET_EXPLORER_MOBILE]: [new RegExp('rv:' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [MICROSOFT_EDGE]: [new RegExp(EDGE + '?\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [CHROME]: [new RegExp('(' + CHROME + '|CrMo)\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [CHROME_IOS]: [new RegExp('CriOS\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    'UC Browser': [new RegExp('(UCBrowser|UCWEB)\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [SAFARI]: [DEFAULT_BROWSER_VERSION_REGEX],\n    [MOBILE_SAFARI]: [DEFAULT_BROWSER_VERSION_REGEX],\n    [OPERA]: [new RegExp('(' + OPERA + '|OPR)\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [FIREFOX]: [new RegExp(FIREFOX + '\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [FIREFOX_IOS]: [new RegExp('FxiOS\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [KONQUEROR]: [new RegExp('Konqueror[:/]?' + BROWSER_VERSION_REGEX_SUFFIX, 'i')],\n    // not every blackberry user agent has the version after the name\n    [BLACKBERRY]: [new RegExp(BLACKBERRY + ' ' + BROWSER_VERSION_REGEX_SUFFIX), DEFAULT_BROWSER_VERSION_REGEX],\n    [ANDROID_MOBILE]: [new RegExp('android\\\\s' + BROWSER_VERSION_REGEX_SUFFIX, 'i')],\n    [SAMSUNG_INTERNET]: [new RegExp(SAMSUNG_BROWSER + '\\\\/' + BROWSER_VERSION_REGEX_SUFFIX)],\n    [INTERNET_EXPLORER]: [new RegExp('(rv:|MSIE )' + BROWSER_VERSION_REGEX_SUFFIX)],\n    Mozilla: [new RegExp('rv:' + BROWSER_VERSION_REGEX_SUFFIX)],\n}\n\n/**\n * This function detects which browser version is running this script,\n * parsing major and minor version (e.g., 42.1). User agent strings from:\n * http://www.useragentstring.com/pages/useragentstring.php\n *\n * `navigator.vendor` is passed in and used to help with detecting certain browsers\n * NB `navigator.vendor` is deprecated and not present in every browser\n */\nexport const detectBrowserVersion = function (userAgent: string, vendor: string | undefined): number | null {\n    const browser = detectBrowser(userAgent, vendor)\n    const regexes: RegExp[] | undefined = versionRegexes[browser as keyof typeof versionRegexes]\n    if (isUndefined(regexes)) {\n        return null\n    }\n\n    for (let i = 0; i < regexes.length; i++) {\n        const regex = regexes[i]\n        const matches = userAgent.match(regex)\n        if (matches) {\n            return parseFloat(matches[matches.length - 2])\n        }\n    }\n    return null\n}\n\n// to avoid repeating regexes or calling them twice, we have an array of matches\n// the first regex that matches uses its matcher function to return the result\nconst osMatchers: [\n    RegExp,\n    [string, string] | ((match: RegExpMatchArray | null, user_agent: string) => [string, string]),\n][] = [\n    [\n        new RegExp(XBOX + '; ' + XBOX + ' (.*?)[);]', 'i'),\n        (match) => {\n            return [XBOX, (match && match[1]) || '']\n        },\n    ],\n    [new RegExp(NINTENDO, 'i'), [NINTENDO, '']],\n    [new RegExp(PLAYSTATION, 'i'), [PLAYSTATION, '']],\n    [BLACKBERRY_REGEX, [BLACKBERRY, '']],\n    [\n        new RegExp(WINDOWS, 'i'),\n        (_, user_agent) => {\n            if (/Phone/.test(user_agent) || /WPDesktop/.test(user_agent)) {\n                return [WINDOWS_PHONE, '']\n            }\n            // not all JS versions support negative lookbehind, so we need two checks here\n            if (new RegExp(MOBILE).test(user_agent) && !/IEMobile\\b/.test(user_agent)) {\n                return [WINDOWS + ' ' + MOBILE, '']\n            }\n            const match = /Windows NT ([0-9.]+)/i.exec(user_agent)\n            if (match && match[1]) {\n                const version = match[1]\n                let osVersion = windowsVersionMap[version] || ''\n                if (/arm/i.test(user_agent)) {\n                    osVersion = 'RT'\n                }\n                return [WINDOWS, osVersion]\n            }\n            return [WINDOWS, '']\n        },\n    ],\n    [\n        /((iPhone|iPad|iPod).*?OS (\\d+)_(\\d+)_?(\\d+)?|iPhone)/,\n        (match) => {\n            if (match && match[3]) {\n                const versionParts = [match[3], match[4], match[5] || '0']\n                return [IOS, versionParts.join('.')]\n            }\n            return [IOS, '']\n        },\n    ],\n    [\n        /(watch.*\\/(\\d+\\.\\d+\\.\\d+)|watch os,(\\d+\\.\\d+),)/i,\n        (match) => {\n            // e.g. Watch4,3/5.3.8 (16U680)\n            let version = ''\n            if (match && match.length >= 3) {\n                version = isUndefined(match[2]) ? match[3] : match[2]\n            }\n            return ['watchOS', version]\n        },\n    ],\n    [\n        new RegExp('(' + ANDROID + ' (\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?|' + ANDROID + ')', 'i'),\n        (match) => {\n            if (match && match[2]) {\n                const versionParts = [match[2], match[3], match[4] || '0']\n                return [ANDROID, versionParts.join('.')]\n            }\n            return [ANDROID, '']\n        },\n    ],\n    [\n        /Mac OS X (\\d+)[_.](\\d+)[_.]?(\\d+)?/i,\n        (match) => {\n            const result: [string, string] = ['Mac OS X', '']\n            if (match && match[1]) {\n                const versionParts = [match[1], match[2], match[3] || '0']\n                result[1] = versionParts.join('.')\n            }\n            return result\n        },\n    ],\n    [\n        /Mac/i,\n        // mop up a few non-standard UAs that should match mac\n        ['Mac OS X', ''],\n    ],\n    [/CrOS/, [CHROME_OS, '']],\n    [/Linux|debian/i, ['Linux', '']],\n]\n\nexport const detectOS = function (user_agent: string): [string, string] {\n    for (let i = 0; i < osMatchers.length; i++) {\n        const [rgex, resultOrFn] = osMatchers[i]\n        const match = rgex.exec(user_agent)\n        const result = match && (isFunction(resultOrFn) ? resultOrFn(match, user_agent) : resultOrFn)\n        if (result) {\n            return result\n        }\n    }\n    return ['', '']\n}\n\nexport const detectDevice = function (user_agent: string): string {\n    if (NINTENDO_REGEX.test(user_agent)) {\n        return NINTENDO\n    } else if (PLAYSTATION_REGEX.test(user_agent)) {\n        return PLAYSTATION\n    } else if (XBOX_REGEX.test(user_agent)) {\n        return XBOX\n    } else if (new RegExp(OUYA, 'i').test(user_agent)) {\n        return OUYA\n    } else if (new RegExp('(' + WINDOWS_PHONE + '|WPDesktop)', 'i').test(user_agent)) {\n        return WINDOWS_PHONE\n    } else if (/iPad/.test(user_agent)) {\n        return IPAD\n    } else if (/iPod/.test(user_agent)) {\n        return 'iPod Touch'\n    } else if (/iPhone/.test(user_agent)) {\n        return 'iPhone'\n    } else if (/(watch)(?: ?os[,/]|\\d,\\d\\/)[\\d.]+/i.test(user_agent)) {\n        return APPLE_WATCH\n    } else if (BLACKBERRY_REGEX.test(user_agent)) {\n        return BLACKBERRY\n    } else if (/(kobo)\\s(ereader|touch)/i.test(user_agent)) {\n        return 'Kobo'\n    } else if (new RegExp(NOKIA, 'i').test(user_agent)) {\n        return NOKIA\n    } else if (\n        // Kindle Fire without Silk / Echo Show\n        /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\\))/i.test(user_agent) ||\n        // Kindle Fire HD\n        /(kf[a-z]+)( bui|\\)).+silk\\//i.test(user_agent)\n    ) {\n        return 'Kindle Fire'\n    } else if (/(Android|ZTE)/i.test(user_agent)) {\n        if (\n            !new RegExp(MOBILE).test(user_agent) ||\n            /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(user_agent)\n        ) {\n            if (\n                (/pixel[\\daxl ]{1,6}/i.test(user_agent) && !/pixel c/i.test(user_agent)) ||\n                /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(user_agent) ||\n                (/lmy47v/i.test(user_agent) && !/QTAQZ3/i.test(user_agent))\n            ) {\n                return ANDROID\n            }\n            return ANDROID_TABLET\n        } else {\n            return ANDROID\n        }\n    } else if (new RegExp('(pda|' + MOBILE + ')', 'i').test(user_agent)) {\n        return GENERIC_MOBILE\n    } else if (new RegExp(TABLET, 'i').test(user_agent) && !new RegExp(TABLET + ' pc', 'i').test(user_agent)) {\n        return GENERIC_TABLET\n    } else {\n        return ''\n    }\n}\n\nexport const detectDeviceType = function (user_agent: string): string {\n    const device = detectDevice(user_agent)\n    if (\n        device === IPAD ||\n        device === ANDROID_TABLET ||\n        device === 'Kobo' ||\n        device === 'Kindle Fire' ||\n        device === GENERIC_TABLET\n    ) {\n        return TABLET\n    } else if (device === NINTENDO || device === XBOX || device === PLAYSTATION || device === OUYA) {\n        return 'Console'\n    } else if (device === APPLE_WATCH) {\n        return 'Wearable'\n    } else if (device) {\n        return MOBILE\n    } else {\n        return 'Desktop'\n    }\n}\n","import { VNode, cloneElement, createContext } from 'preact'\nimport { PostHog } from '../../posthog-core'\nimport {\n    MultipleSurveyQuestion,\n    Survey,\n    SurveyAppearance,\n    SurveyPosition,\n    SurveyQuestion,\n    SurveySchedule,\n} from '../../posthog-surveys-types'\nimport { document as _document, window as _window, userAgent } from '../../utils/globals'\nimport { SURVEY_LOGGER as logger, SURVEY_IN_PROGRESS_PREFIX, SURVEY_SEEN_PREFIX } from '../../utils/survey-utils'\nimport { isNullish, isArray } from '../../utils/type-utils'\nimport { prepareStylesheet } from '../utils/stylesheet-loader'\n\nimport { SurveyMatchType } from '../../posthog-surveys-types'\nimport { isMatchingRegex } from '../../utils/regex-utils'\nimport { detectDeviceType } from '../../utils/user-agent-utils'\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nexport function getFontFamily(fontFamily?: string): string {\n    if (fontFamily === 'inherit') {\n        return 'inherit'\n    }\n\n    const defaultFontStack =\n        'BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"'\n    return fontFamily ? `${fontFamily}, ${defaultFontStack}` : `-apple-system, ${defaultFontStack}`\n}\n\nexport function getSurveyResponseKey(questionId: string) {\n    return `$survey_response_${questionId}`\n}\n\nexport const defaultSurveyAppearance = {\n    backgroundColor: '#eeeded',\n    submitButtonColor: 'black',\n    submitButtonTextColor: 'white',\n    ratingButtonColor: 'white',\n    ratingButtonActiveColor: 'black',\n    borderColor: '#c9c6c6',\n    placeholder: 'Start typing...',\n    whiteLabel: false,\n    displayThankYouMessage: true,\n    thankYouMessageHeader: 'Thank you for your feedback!',\n    position: SurveyPosition.Right,\n    widgetColor: '#e0a045',\n    zIndex: '2147483647',\n    disabledButtonOpacity: '0.6',\n    maxWidth: '300px',\n} as const\n\nexport const style = (appearance: SurveyAppearance | null) => {\n    const positions = {\n        [SurveyPosition.Left]: 'left: 30px;',\n        [SurveyPosition.Right]: 'right: 60px;',\n        [SurveyPosition.Center]: `\n            left: 50%;\n            transform: translateX(-50%);\n          `,\n        [SurveyPosition.NextToTrigger]: 'right: 30px;',\n    }\n\n    const styles = `\n          .survey-form, .thank-you-message {\n              position: fixed;\n              margin: 0px;\n              bottom: 0px;\n              color: black;\n              font-weight: normal;\n              font-family: ${getFontFamily(appearance?.fontFamily)};\n              text-align: left;\n              max-width: ${appearance?.maxWidth || defaultSurveyAppearance.maxWidth};\n              width: 100%;\n              z-index: ${appearance?.zIndex || defaultSurveyAppearance.zIndex};\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              border-bottom: 0px;\n              ${appearance?.position ? positions[appearance.position] : positions[SurveyPosition.Right]}\n              flex-direction: column;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              border-top-left-radius: 10px;\n              border-top-right-radius: 10px;\n              box-shadow: -6px 0 16px -8px rgb(0 0 0 / 8%), -9px 0 28px 0 rgb(0 0 0 / 5%), -12px 0 48px 16px rgb(0 0 0 / 3%);\n          }\n\n          .survey-box, .thank-you-message-container {\n              padding: 20px 25px 10px;\n              display: flex;\n              flex-direction: column;\n              border-radius: 10px;\n          }\n\n          .thank-you-message {\n              text-align: center;\n          }\n\n          .form-submit[disabled] {\n              opacity: ${appearance?.disabledButtonOpacity || '0.6'};\n              filter: grayscale(50%);\n              cursor: not-allowed;\n          }\n          .survey-form textarea {\n              color: #2d2d2d;\n              font-size: 14px;\n              font-family: ${getFontFamily(appearance?.fontFamily)};\n              background: white;\n              color: black;\n              outline: none;\n              padding-left: 10px;\n              padding-right: 10px;\n              padding-top: 10px;\n              border-radius: 6px;\n              border-color: ${appearance?.borderColor || '#c9c6c6'};\n              margin-top: 14px;\n              width: 100%;\n              box-sizing: border-box;\n          }\n          .survey-box:has(.survey-question:empty):not(:has(.survey-question-description)) textarea {\n              margin-top: 0;\n          }\n          .form-submit {\n              box-sizing: border-box;\n              margin: 0;\n              font-family: inherit;\n              overflow: visible;\n              text-transform: none;\n              position: relative;\n              display: inline-block;\n              font-weight: 700;\n              white-space: nowrap;\n              text-align: center;\n              border: 1.5px solid transparent;\n              cursor: pointer;\n              user-select: none;\n              touch-action: manipulation;\n              padding: 12px;\n              font-size: 14px;\n              border-radius: 6px;\n              outline: 0;\n              background: ${appearance?.submitButtonColor || 'black'} !important;\n              text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);\n              box-shadow: 0 2px 0 rgba(0, 0, 0, 0.045);\n              width: 100%;\n          }\n          .form-cancel {\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              background: white;\n              border-radius: 100%;\n              line-height: 0;\n              cursor: pointer;\n              padding: 12px;\n              position: absolute;\n              top: 0;\n              right: 0;\n              transform: translate(50%, -50%);\n          }\n          .bolded { font-weight: 600; }\n          .buttons {\n              display: flex;\n              justify-content: center;\n          }\n          .footer-branding {\n              font-size: 11px;\n              margin-top: 10px;\n              text-align: center;\n              display: flex;\n              justify-content: center;\n              gap: 4px;\n              align-items: center;\n              font-weight: 500;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              text-decoration: none;\n              backgroundColor: ${appearance?.backgroundColor || '#eeeded'};\n              color: ${getContrastingTextColor(appearance?.backgroundColor || '#eeeded')};\n          }\n          .survey-question {\n              font-weight: 500;\n              font-size: 14px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .question-textarea-wrapper {\n              display: flex;\n              flex-direction: column;\n          }\n          .survey-question-description {\n              font-size: 13px;\n              padding-top: 5px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .ratings-number {\n              font-size: 16px;\n              font-weight: 600;\n              padding: 8px 0px;\n              border: none;\n          }\n          .ratings-number:hover {\n              cursor: pointer;\n          }\n          .rating-options {\n              margin-top: 14px;\n          }\n          .rating-options-number {\n              display: grid;\n              border-radius: 6px;\n              overflow: hidden;\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n          }\n          .rating-options-number > .ratings-number {\n              border-right: 1px solid ${appearance?.borderColor || '#c9c6c6'};\n          }\n          .rating-options-number > .ratings-number:last-of-type {\n              border-right: 0px;\n          }\n          .rating-options-number .rating-active {\n              background: ${appearance?.ratingButtonActiveColor || 'black'};\n          }\n          .rating-options-emoji {\n              display: flex;\n              justify-content: space-between;\n          }\n          .ratings-emoji {\n              font-size: 16px;\n              background-color: transparent;\n              border: none;\n              padding: 0px;\n          }\n          .ratings-emoji:hover {\n              cursor: pointer;\n          }\n          .ratings-emoji.rating-active svg {\n              fill: ${appearance?.ratingButtonActiveColor || 'black'};\n          }\n          .emoji-svg {\n              fill: '#939393';\n          }\n          .rating-text {\n              display: flex;\n              flex-direction: row;\n              font-size: 11px;\n              justify-content: space-between;\n              margin-top: 6px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              opacity: .60;\n          }\n          .limit-height {\n              max-height: 300px;\n              overflow: auto;\n              scrollbar-width: thin;\n              scrollbar-color: ${appearance?.borderColor || '#c9c6c6'} ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .multiple-choice-options {\n              margin-top: 13px;\n              font-size: 14px;\n          }\n          .survey-box:has(.survey-question:empty):not(:has(.survey-question-description)) .multiple-choice-options {\n              margin-top: 0;\n          }\n          .multiple-choice-options .choice-option {\n              display: flex;\n              align-items: center;\n              gap: 4px;\n              font-size: 13px;\n              cursor: pointer;\n              margin-bottom: 5px;\n              position: relative;\n          }\n          .multiple-choice-options > .choice-option:last-of-type {\n              margin-bottom: 0px;\n          }\n          .multiple-choice-options input {\n              cursor: pointer;\n              position: absolute;\n              opacity: 0;\n          }\n          .choice-check {\n              position: absolute;\n              right: 10px;\n              background: white;\n          }\n          .choice-check svg {\n              display: none;\n          }\n          .multiple-choice-options .choice-option:hover .choice-check svg {\n              display: inline-block;\n              opacity: .25;\n          }\n          .multiple-choice-options input:checked + label + .choice-check svg {\n              display: inline-block;\n              opacity: 100% !important;\n          }\n          .multiple-choice-options input:checked + label {\n              font-weight: bold;\n              border: 1.5px solid rgba(0,0,0);\n          }\n          .multiple-choice-options input:checked + label input {\n              font-weight: bold;\n          }\n          .multiple-choice-options label {\n              width: 100%;\n              cursor: pointer;\n              padding: 10px;\n              border: 1.5px solid rgba(0,0,0,.25);\n              border-radius: 4px;\n              background: white;\n          }\n          .multiple-choice-options .choice-option-open label {\n              padding-right: 30px;\n              display: flex;\n              flex-wrap: wrap;\n              gap: 8px;\n              max-width: 100%;\n          }\n          .multiple-choice-options .choice-option-open label span {\n              width: 100%;\n          }\n          .multiple-choice-options .choice-option-open input:disabled + label {\n              opacity: 0.6;\n          }\n          .multiple-choice-options .choice-option-open label input {\n              position: relative;\n              opacity: 1;\n              flex-grow: 1;\n              border: 0;\n              outline: 0;\n          }\n          .thank-you-message-body {\n              margin-top: 6px;\n              font-size: 14px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .thank-you-message-header {\n              margin: 10px 0px 0px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .thank-you-message-container .form-submit {\n              margin-top: 20px;\n              margin-bottom: 10px;\n          }\n          .thank-you-message-countdown {\n              margin-left: 6px;\n          }\n          .bottom-section {\n              margin-top: 14px;\n          }\n          `\n\n    return styles\n        .replace(/[\\n\\r\\t]+/g, ' ') // remove newlines/tabs\n        .replace(/\\s{2,}/g, ' ') // collapse extra spaces\n        .trim()\n}\n\nexport const addSurveyCSSVariablesToElement = (element: HTMLDivElement, appearance?: SurveyAppearance | null) => {\n    const effectiveAppearance = { ...defaultSurveyAppearance, ...appearance }\n    const hostStyle = element.style\n\n    hostStyle.setProperty('--ph-survey-font-family', getFontFamily(effectiveAppearance.fontFamily))\n    hostStyle.setProperty('--ph-survey-max-width', effectiveAppearance.maxWidth)\n    hostStyle.setProperty('--ph-survey-z-index', effectiveAppearance.zIndex)\n    hostStyle.setProperty('--ph-survey-border-color', effectiveAppearance.borderColor)\n    hostStyle.setProperty('--ph-survey-background-color', effectiveAppearance.backgroundColor)\n    hostStyle.setProperty('--ph-survey-disabled-button-opacity', effectiveAppearance.disabledButtonOpacity)\n    hostStyle.setProperty('--ph-survey-submit-button-color', effectiveAppearance.submitButtonColor)\n    hostStyle.setProperty(\n        '--ph-survey-submit-button-text-color',\n        getContrastingTextColor(effectiveAppearance.submitButtonColor)\n    )\n    hostStyle.setProperty('--ph-survey-rating-active-color', effectiveAppearance.ratingButtonActiveColor)\n    hostStyle.setProperty(\n        '--ph-survey-text-primary-color',\n        getContrastingTextColor(effectiveAppearance.backgroundColor)\n    )\n    hostStyle.setProperty('--ph-widget-color', effectiveAppearance.widgetColor)\n    hostStyle.setProperty('--ph-widget-text-color', getContrastingTextColor(effectiveAppearance.widgetColor))\n    hostStyle.setProperty('--ph-widget-z-index', effectiveAppearance.zIndex)\n\n    // Adjust input/choice background slightly if main background is white\n    if (effectiveAppearance.backgroundColor === 'white') {\n        hostStyle.setProperty('--ph-survey-input-background', '#f8f8f8')\n        hostStyle.setProperty('--ph-survey-choice-background', '#fdfdfd')\n        hostStyle.setProperty('--ph-survey-choice-background-hover', '#f9f9f9')\n    } else {\n        hostStyle.setProperty('--ph-survey-input-background', 'white') // Default if not white\n        hostStyle.setProperty('--ph-survey-choice-background', 'white') // Default if not white\n        hostStyle.setProperty('--ph-survey-choice-background-hover', '#fcfcfc') // Default if not white\n    }\n}\n\nfunction nameToHex(name: string) {\n    return {\n        aliceblue: '#f0f8ff',\n        antiquewhite: '#faebd7',\n        aqua: '#00ffff',\n        aquamarine: '#7fffd4',\n        azure: '#f0ffff',\n        beige: '#f5f5dc',\n        bisque: '#ffe4c4',\n        black: '#000000',\n        blanchedalmond: '#ffebcd',\n        blue: '#0000ff',\n        blueviolet: '#8a2be2',\n        brown: '#a52a2a',\n        burlywood: '#deb887',\n        cadetblue: '#5f9ea0',\n        chartreuse: '#7fff00',\n        chocolate: '#d2691e',\n        coral: '#ff7f50',\n        cornflowerblue: '#6495ed',\n        cornsilk: '#fff8dc',\n        crimson: '#dc143c',\n        cyan: '#00ffff',\n        darkblue: '#00008b',\n        darkcyan: '#008b8b',\n        darkgoldenrod: '#b8860b',\n        darkgray: '#a9a9a9',\n        darkgreen: '#006400',\n        darkkhaki: '#bdb76b',\n        darkmagenta: '#8b008b',\n        darkolivegreen: '#556b2f',\n        darkorange: '#ff8c00',\n        darkorchid: '#9932cc',\n        darkred: '#8b0000',\n        darksalmon: '#e9967a',\n        darkseagreen: '#8fbc8f',\n        darkslateblue: '#483d8b',\n        darkslategray: '#2f4f4f',\n        darkturquoise: '#00ced1',\n        darkviolet: '#9400d3',\n        deeppink: '#ff1493',\n        deepskyblue: '#00bfff',\n        dimgray: '#696969',\n        dodgerblue: '#1e90ff',\n        firebrick: '#b22222',\n        floralwhite: '#fffaf0',\n        forestgreen: '#228b22',\n        fuchsia: '#ff00ff',\n        gainsboro: '#dcdcdc',\n        ghostwhite: '#f8f8ff',\n        gold: '#ffd700',\n        goldenrod: '#daa520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#adff2f',\n        honeydew: '#f0fff0',\n        hotpink: '#ff69b4',\n        'indianred ': '#cd5c5c',\n        indigo: '#4b0082',\n        ivory: '#fffff0',\n        khaki: '#f0e68c',\n        lavender: '#e6e6fa',\n        lavenderblush: '#fff0f5',\n        lawngreen: '#7cfc00',\n        lemonchiffon: '#fffacd',\n        lightblue: '#add8e6',\n        lightcoral: '#f08080',\n        lightcyan: '#e0ffff',\n        lightgoldenrodyellow: '#fafad2',\n        lightgrey: '#d3d3d3',\n        lightgreen: '#90ee90',\n        lightpink: '#ffb6c1',\n        lightsalmon: '#ffa07a',\n        lightseagreen: '#20b2aa',\n        lightskyblue: '#87cefa',\n        lightslategray: '#778899',\n        lightsteelblue: '#b0c4de',\n        lightyellow: '#ffffe0',\n        lime: '#00ff00',\n        limegreen: '#32cd32',\n        linen: '#faf0e6',\n        magenta: '#ff00ff',\n        maroon: '#800000',\n        mediumaquamarine: '#66cdaa',\n        mediumblue: '#0000cd',\n        mediumorchid: '#ba55d3',\n        mediumpurple: '#9370d8',\n        mediumseagreen: '#3cb371',\n        mediumslateblue: '#7b68ee',\n        mediumspringgreen: '#00fa9a',\n        mediumturquoise: '#48d1cc',\n        mediumvioletred: '#c71585',\n        midnightblue: '#191970',\n        mintcream: '#f5fffa',\n        mistyrose: '#ffe4e1',\n        moccasin: '#ffe4b5',\n        navajowhite: '#ffdead',\n        navy: '#000080',\n        oldlace: '#fdf5e6',\n        olive: '#808000',\n        olivedrab: '#6b8e23',\n        orange: '#ffa500',\n        orangered: '#ff4500',\n        orchid: '#da70d6',\n        palegoldenrod: '#eee8aa',\n        palegreen: '#98fb98',\n        paleturquoise: '#afeeee',\n        palevioletred: '#d87093',\n        papayawhip: '#ffefd5',\n        peachpuff: '#ffdab9',\n        peru: '#cd853f',\n        pink: '#ffc0cb',\n        plum: '#dda0dd',\n        powderblue: '#b0e0e6',\n        purple: '#800080',\n        red: '#ff0000',\n        rosybrown: '#bc8f8f',\n        royalblue: '#4169e1',\n        saddlebrown: '#8b4513',\n        salmon: '#fa8072',\n        sandybrown: '#f4a460',\n        seagreen: '#2e8b57',\n        seashell: '#fff5ee',\n        sienna: '#a0522d',\n        silver: '#c0c0c0',\n        skyblue: '#87ceeb',\n        slateblue: '#6a5acd',\n        slategray: '#708090',\n        snow: '#fffafa',\n        springgreen: '#00ff7f',\n        steelblue: '#4682b4',\n        tan: '#d2b48c',\n        teal: '#008080',\n        thistle: '#d8bfd8',\n        tomato: '#ff6347',\n        turquoise: '#40e0d0',\n        violet: '#ee82ee',\n        wheat: '#f5deb3',\n        white: '#ffffff',\n        whitesmoke: '#f5f5f5',\n        yellow: '#ffff00',\n        yellowgreen: '#9acd32',\n    }[name.toLowerCase()]\n}\n\nfunction hex2rgb(c: string) {\n    if (c[0] === '#') {\n        const hexColor = c.replace(/^#/, '')\n        const r = parseInt(hexColor.slice(0, 2), 16)\n        const g = parseInt(hexColor.slice(2, 4), 16)\n        const b = parseInt(hexColor.slice(4, 6), 16)\n        return 'rgb(' + r + ',' + g + ',' + b + ')'\n    }\n    return 'rgb(255, 255, 255)'\n}\n\nexport function getContrastingTextColor(color: string = defaultSurveyAppearance.backgroundColor) {\n    let rgb\n    if (color[0] === '#') {\n        rgb = hex2rgb(color)\n    }\n    if (color.startsWith('rgb')) {\n        rgb = color\n    }\n    // otherwise it's a color name\n    const nameColorToHex = nameToHex(color)\n    if (nameColorToHex) {\n        rgb = hex2rgb(nameColorToHex)\n    }\n    if (!rgb) {\n        return 'black'\n    }\n    const colorMatch = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)\n    if (colorMatch) {\n        const r = parseInt(colorMatch[1])\n        const g = parseInt(colorMatch[2])\n        const b = parseInt(colorMatch[3])\n        const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b))\n        return hsp > 127.5 ? 'black' : 'white'\n    }\n    return 'black'\n}\n\nexport const createShadow = (styleSheet: string, surveyId: string, element?: Element, posthog?: PostHog) => {\n    const div = document.createElement('div')\n    div.className = getSurveyContainerClass({ id: surveyId })\n    const shadow = div.attachShadow({ mode: 'open' })\n    if (styleSheet) {\n        const styleElement = prepareStylesheet(document, styleSheet, posthog)\n        if (styleElement) {\n            shadow.appendChild(styleElement)\n        }\n    }\n    ;(element ? element : document.body).appendChild(div)\n    return shadow\n}\n\ninterface SendSurveyEventArgs {\n    responses: Record<string, string | number | string[] | null>\n    survey: Survey\n    surveySubmissionId: string\n    isSurveyCompleted: boolean\n    posthog?: PostHog\n}\n\nconst getSurveyResponseValue = (responses: Record<string, string | number | string[] | null>, questionId?: string) => {\n    if (!questionId) {\n        return null\n    }\n    const response = responses[getSurveyResponseKey(questionId)]\n    if (isArray(response)) {\n        return [...response]\n    }\n    return response\n}\n\nexport const sendSurveyEvent = ({\n    responses,\n    survey,\n    surveySubmissionId,\n    posthog,\n    isSurveyCompleted,\n}: SendSurveyEventArgs) => {\n    if (!posthog) {\n        logger.error('[survey sent] event not captured, PostHog instance not found.')\n        return\n    }\n\n    // Mark as seen in localStorage regardless of completion status\n    localStorage.setItem(getSurveySeenKey(survey), 'true')\n\n    // Send the event payload\n    posthog.capture('survey sent', {\n        $survey_name: survey.name,\n        $survey_id: survey.id,\n        $survey_iteration: survey.current_iteration,\n        $survey_iteration_start_date: survey.current_iteration_start_date,\n        $survey_questions: survey.questions.map((question) => ({\n            id: question.id,\n            question: question.question,\n            response: getSurveyResponseValue(responses, question.id),\n        })),\n        $survey_submission_id: surveySubmissionId,\n        $survey_completed: isSurveyCompleted,\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        ...responses,\n        $set: {\n            [getSurveyInteractionProperty(survey, 'responded')]: true,\n        },\n    })\n\n    if (isSurveyCompleted) {\n        // Only dispatch PHSurveySent if the survey is completed, as that removes the survey from focus\n        window.dispatchEvent(new CustomEvent('PHSurveySent', { detail: { surveyId: survey.id } }))\n        clearInProgressSurveyState(survey)\n    }\n}\n\nexport const dismissedSurveyEvent = (survey: Survey, posthog?: PostHog, readOnly?: boolean) => {\n    if (!posthog) {\n        logger.error('[survey dismissed] event not captured, PostHog instance not found.')\n        return\n    }\n    if (readOnly) {\n        return\n    }\n\n    const inProgressSurvey = getInProgressSurveyState(survey)\n\n    // Send dismissal event\n    posthog.capture('survey dismissed', {\n        $survey_name: survey.name,\n        $survey_id: survey.id,\n        $survey_iteration: survey.current_iteration,\n        $survey_iteration_start_date: survey.current_iteration_start_date,\n        // check if the survey is partially completed\n        $survey_partially_completed:\n            Object.values(inProgressSurvey?.responses || {}).filter((resp) => !isNullish(resp)).length > 0,\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        ...inProgressSurvey?.responses,\n        $survey_submission_id: inProgressSurvey?.surveySubmissionId,\n        $survey_questions: survey.questions.map((question) => ({\n            id: question.id,\n            question: question.question,\n            response: getSurveyResponseValue(inProgressSurvey?.responses || {}, question.id),\n        })),\n        $set: {\n            [getSurveyInteractionProperty(survey, 'dismissed')]: true,\n        },\n    })\n\n    // Clear in-progress state on dismissal\n    clearInProgressSurveyState(survey)\n    localStorage.setItem(getSurveySeenKey(survey), 'true')\n    window.dispatchEvent(new CustomEvent('PHSurveyClosed', { detail: { surveyId: survey.id } }))\n}\n\n// Use the Fisher-yates algorithm to shuffle this array\n// https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\nexport const shuffle = (array: any[]) => {\n    return array\n        .map((a) => ({ sort: Math.floor(Math.random() * 10), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value)\n}\n\nconst reverseIfUnshuffled = (unshuffled: any[], shuffled: any[]): any[] => {\n    if (unshuffled.length === shuffled.length && unshuffled.every((val, index) => val === shuffled[index])) {\n        return shuffled.reverse()\n    }\n\n    return shuffled\n}\n\nexport const getDisplayOrderChoices = (question: MultipleSurveyQuestion): string[] => {\n    if (!question.shuffleOptions) {\n        return question.choices\n    }\n\n    const displayOrderChoices = question.choices\n    let openEndedChoice = ''\n    if (question.hasOpenChoice) {\n        // if the question has an open-ended choice, its always the last element in the choices array.\n        openEndedChoice = displayOrderChoices.pop()!\n    }\n\n    const shuffledOptions = reverseIfUnshuffled(displayOrderChoices, shuffle(displayOrderChoices))\n\n    if (question.hasOpenChoice) {\n        question.choices.push(openEndedChoice)\n        shuffledOptions.push(openEndedChoice)\n    }\n\n    return shuffledOptions\n}\n\nexport const getDisplayOrderQuestions = (survey: Survey): SurveyQuestion[] => {\n    if (!survey.appearance || !survey.appearance.shuffleQuestions || survey.enable_partial_responses) {\n        return survey.questions\n    }\n\n    return reverseIfUnshuffled(survey.questions, shuffle(survey.questions))\n}\n\nexport const hasEvents = (survey: Pick<Survey, 'conditions'>): boolean => {\n    return survey.conditions?.events?.values?.length != undefined && survey.conditions?.events?.values?.length > 0\n}\n\nexport const canActivateRepeatedly = (\n    survey: Pick<Survey, 'schedule' | 'conditions' | 'id' | 'current_iteration'>\n): boolean => {\n    return (\n        !!(survey.conditions?.events?.repeatedActivation && hasEvents(survey)) ||\n        survey.schedule === SurveySchedule.Always ||\n        isSurveyInProgress(survey)\n    )\n}\n\n/**\n * getSurveySeen checks local storage for the surveySeen Key a\n * and overrides this value if the survey can be repeatedly activated by its events.\n * @param survey\n */\nexport const getSurveySeen = (survey: Survey): boolean => {\n    const surveySeen = localStorage.getItem(getSurveySeenKey(survey))\n    if (surveySeen) {\n        // if a survey has already been seen,\n        // we will override it with the event repeated activation value.\n        return !canActivateRepeatedly(survey)\n    }\n\n    return false\n}\n\nexport const getSurveySeenKey = (survey: Survey): string => {\n    let surveySeenKey = `${SURVEY_SEEN_PREFIX}${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        surveySeenKey = `${SURVEY_SEEN_PREFIX}${survey.id}_${survey.current_iteration}`\n    }\n\n    return surveySeenKey\n}\n\nconst getSurveyInteractionProperty = (survey: Survey, action: string): string => {\n    let surveyProperty = `$survey_${action}/${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        surveyProperty = `$survey_${action}/${survey.id}/${survey.current_iteration}`\n    }\n\n    return surveyProperty\n}\n\nexport const hasWaitPeriodPassed = (\n    lastSeenSurveyDate: string | null,\n    waitPeriodInDays: number | undefined\n): boolean => {\n    if (!waitPeriodInDays || !lastSeenSurveyDate) {\n        return true\n    }\n\n    const today = new Date()\n    const diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime())\n    const diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24))\n    return diffDaysFromToday > waitPeriodInDays\n}\n\ninterface SurveyContextProps {\n    isPreviewMode: boolean\n    previewPageIndex: number | undefined\n    onPopupSurveyDismissed: () => void\n    isPopup: boolean\n    onPreviewSubmit: (res: string | string[] | number | null) => void\n    surveySubmissionId: string\n}\n\nexport const SurveyContext = createContext<SurveyContextProps>({\n    isPreviewMode: false,\n    previewPageIndex: 0,\n    onPopupSurveyDismissed: () => {},\n    isPopup: true,\n    onPreviewSubmit: () => {},\n    surveySubmissionId: '',\n})\n\ninterface RenderProps {\n    component: VNode<{ className: string }>\n    children: string\n    renderAsHtml?: boolean\n    style?: React.CSSProperties\n}\n\nexport const renderChildrenAsTextOrHtml = ({ component, children, renderAsHtml, style }: RenderProps) => {\n    return renderAsHtml\n        ? cloneElement(component, {\n              dangerouslySetInnerHTML: { __html: children },\n              style,\n          })\n        : cloneElement(component, {\n              children,\n              style,\n          })\n}\n\nconst surveyValidationMap: Record<SurveyMatchType, (targets: string[], value: string) => boolean> = {\n    icontains: (targets, value) => targets.some((target) => value.toLowerCase().includes(target.toLowerCase())),\n    not_icontains: (targets, value) => targets.every((target) => !value.toLowerCase().includes(target.toLowerCase())),\n    regex: (targets, value) => targets.some((target) => isMatchingRegex(value, target)),\n    not_regex: (targets, value) => targets.every((target) => !isMatchingRegex(value, target)),\n    exact: (targets, value) => targets.some((target) => value === target),\n    is_not: (targets, value) => targets.every((target) => value !== target),\n}\n\nfunction defaultMatchType(matchType?: SurveyMatchType): SurveyMatchType {\n    return matchType ?? 'icontains'\n}\n\n// use urlMatchType to validate url condition, fallback to contains for backwards compatibility\nexport function doesSurveyUrlMatch(survey: Pick<Survey, 'conditions'>): boolean {\n    if (!survey.conditions?.url) {\n        return true\n    }\n    // if we dont know the url, assume it is not a match\n    const href = window?.location?.href\n    if (!href) {\n        return false\n    }\n    const targets = [survey.conditions.url]\n    return surveyValidationMap[defaultMatchType(survey.conditions?.urlMatchType)](targets, href)\n}\n\nexport function doesSurveyDeviceTypesMatch(survey: Survey): boolean {\n    if (!survey.conditions?.deviceTypes || survey.conditions?.deviceTypes.length === 0) {\n        return true\n    }\n    // if we dont know the device type, assume it is not a match\n    if (!userAgent) {\n        return false\n    }\n\n    const deviceType = detectDeviceType(userAgent)\n    return surveyValidationMap[defaultMatchType(survey.conditions?.deviceTypesMatchType)](\n        survey.conditions.deviceTypes,\n        deviceType\n    )\n}\n\nexport function doesSurveyMatchSelector(survey: Survey): boolean {\n    if (!survey.conditions?.selector) {\n        return true\n    }\n    return !!document?.querySelector(survey.conditions.selector)\n}\n\ninterface InProgressSurveyState {\n    surveySubmissionId: string\n    lastQuestionIndex: number\n    responses: Record<string, string | number | string[] | null>\n}\n\nconst getInProgressSurveyStateKey = (survey: Pick<Survey, 'id' | 'current_iteration'>): string => {\n    let key = `${SURVEY_IN_PROGRESS_PREFIX}${survey.id}`\n    if (survey.current_iteration && survey.current_iteration > 0) {\n        key = `${SURVEY_IN_PROGRESS_PREFIX}${survey.id}_${survey.current_iteration}`\n    }\n    return key\n}\n\nexport const setInProgressSurveyState = (\n    survey: Pick<Survey, 'id' | 'current_iteration'>,\n    state: InProgressSurveyState\n): void => {\n    try {\n        localStorage.setItem(getInProgressSurveyStateKey(survey), JSON.stringify(state))\n    } catch (e) {\n        logger.error('Error setting in-progress survey state in localStorage', e)\n    }\n}\n\nexport const getInProgressSurveyState = (\n    survey: Pick<Survey, 'id' | 'current_iteration'>\n): InProgressSurveyState | null => {\n    try {\n        const stateString = localStorage.getItem(getInProgressSurveyStateKey(survey))\n        if (stateString) {\n            return JSON.parse(stateString) as InProgressSurveyState\n        }\n    } catch (e) {\n        logger.error('Error getting in-progress survey state from localStorage', e)\n    }\n    return null\n}\n\nexport const isSurveyInProgress = (survey: Pick<Survey, 'id' | 'current_iteration'>): boolean => {\n    const state = getInProgressSurveyState(survey)\n    return !isNullish(state?.surveySubmissionId)\n}\n\nexport const clearInProgressSurveyState = (survey: Pick<Survey, 'id' | 'current_iteration'>): void => {\n    try {\n        localStorage.removeItem(getInProgressSurveyStateKey(survey))\n    } catch (e) {\n        logger.error('Error clearing in-progress survey state from localStorage', e)\n    }\n}\n\nexport function getSurveyContainerClass(survey: Pick<Survey, 'id'>, asSelector = false): string {\n    const className = `PostHogSurvey-${survey.id}`\n    return asSelector ? `.${className}` : className\n}\n","import { PostHog } from '../posthog-core'\nimport { Survey } from '../posthog-surveys-types'\nimport { document as _document } from '../utils/globals'\nimport { addSurveyCSSVariablesToElement, getSurveyContainerClass } from './surveys/surveys-extension-utils'\nimport { prepareStylesheet } from './utils/stylesheet-loader'\nimport widgetStyles from './surveys/widget.css'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst document = _document as Document\n\nexport function retrieveWidgetShadow(survey: Survey, posthog?: PostHog) {\n    const widgetClassName = getSurveyContainerClass(survey)\n    const existingDiv = document.querySelector(`.${widgetClassName}`) as HTMLDivElement | null\n\n    if (existingDiv && existingDiv.shadowRoot) {\n        return existingDiv.shadowRoot\n    }\n\n    // If it doesn't exist, create it\n    const div = document.createElement('div')\n    addSurveyCSSVariablesToElement(div, survey.appearance)\n    div.className = widgetClassName\n    const shadow = div.attachShadow({ mode: 'open' })\n    const stylesheet = createWidgetStylesheet(posthog)\n    if (stylesheet) {\n        shadow.appendChild(stylesheet)\n    }\n    document.body.appendChild(div)\n    return shadow\n}\n\nexport function createWidgetStylesheet(posthog?: PostHog) {\n    return prepareStylesheet(document, typeof widgetStyles === 'string' ? widgetStyles : '', posthog)\n}\n","export const satisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146 272q66 0 121.5-35.5T682-393h-52q-23 40-63 61.5T480.5-310q-46.5 0-87-21T331-393h-53q26 61 81 96.5T480-261Zm0 181q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const neutralEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm20 194h253v-49H354v49ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const dissatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146.174 116Q413-417 358.5-379.5T278-280h53q22-42 62.173-65t87.5-23Q528-368 567.5-344.5T630-280h52q-25-63-79.826-100-54.826-37-122-37ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const veryDissatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M480-417q-67 0-121.5 37.5T278-280h404q-25-63-80-100t-122-37Zm-183-72 50-45 45 45 31-36-45-45 45-45-31-36-45 45-50-45-31 36 45 45-45 45 31 36Zm272 0 44-45 51 45 31-36-45-45 45-45-31-36-51 45-44-45-31 36 44 45-44 45 31 36ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142 0 241-99t99-241q0-142-99-241t-241-99q-142 0-241 99t-99 241q0 142 99 241t241 99Z\" />\n    </svg>\n)\nexport const verySatisfiedEmoji = (\n    <svg className=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\">\n        <path d=\"M479.504-261Q537-261 585.5-287q48.5-26 78.5-72.4 6-11.6-.75-22.6-6.75-11-20.25-11H316.918Q303-393 296.5-382t-.5 22.6q30 46.4 78.5 72.4 48.5 26 105.004 26ZM347-578l27 27q7.636 8 17.818 8Q402-543 410-551q8-8 8-18t-8-18l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.636-8 17.818Q276-559 284-551q8 8 18 8t18-8l27-27Zm267 0 27 27q7.714 8 18 8t18-8q8-7.636 8-17.818Q685-579 677-587l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.714-8 18t8 18q7.636 8 17.818 8Q579-543 587-551l27-27ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\" />\n    </svg>\n)\nexport const cancelSVG = (\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M0.164752 0.164752C0.384422 -0.0549175 0.740578 -0.0549175 0.960248 0.164752L6 5.20451L11.0398 0.164752C11.2594 -0.0549175 11.6156 -0.0549175 11.8352 0.164752C12.0549 0.384422 12.0549 0.740578 11.8352 0.960248L6.79549 6L11.8352 11.0398C12.0549 11.2594 12.0549 11.6156 11.8352 11.8352C11.6156 12.0549 11.2594 12.0549 11.0398 11.8352L6 6.79549L0.960248 11.8352C0.740578 12.0549 0.384422 12.0549 0.164752 11.8352C-0.0549175 11.6156 -0.0549175 11.2594 0.164752 11.0398L5.20451 6L0.164752 0.960248C-0.0549175 0.740578 -0.0549175 0.384422 0.164752 0.164752Z\"\n            fill=\"black\"\n        />\n    </svg>\n)\nexport const IconPosthogLogo = (\n    <svg width=\"77\" height=\"14\" viewBox=\"0 0 77 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0_2415_6911)\">\n            <mask\n                id=\"mask0_2415_6911\"\n                style={{ maskType: 'luminance' }}\n                maskUnits=\"userSpaceOnUse\"\n                x=\"0\"\n                y=\"0\"\n                width=\"77\"\n                height=\"14\"\n            >\n                <path d=\"M0.5 0H76.5V14H0.5V0Z\" fill=\"white\" />\n            </mask>\n            <g mask=\"url(#mask0_2415_6911)\">\n                <path\n                    d=\"M5.77226 8.02931C5.59388 8.37329 5.08474 8.37329 4.90634 8.02931L4.4797 7.20672C4.41155 7.07535 4.41155 6.9207 4.4797 6.78933L4.90634 5.96669C5.08474 5.62276 5.59388 5.62276 5.77226 5.96669L6.19893 6.78933C6.26709 6.9207 6.26709 7.07535 6.19893 7.20672L5.77226 8.02931ZM5.77226 12.6946C5.59388 13.0386 5.08474 13.0386 4.90634 12.6946L4.4797 11.872C4.41155 11.7406 4.41155 11.586 4.4797 11.4546L4.90634 10.632C5.08474 10.288 5.59388 10.288 5.77226 10.632L6.19893 11.4546C6.26709 11.586 6.26709 11.7406 6.19893 11.872L5.77226 12.6946Z\"\n                    fill=\"#1D4AFF\"\n                />\n                <path\n                    d=\"M0.5 10.9238C0.5 10.508 1.02142 10.2998 1.32637 10.5938L3.54508 12.7327C3.85003 13.0267 3.63405 13.5294 3.20279 13.5294H0.984076C0.716728 13.5294 0.5 13.3205 0.5 13.0627V10.9238ZM0.5 8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.19753 13.3927C5.28831 13.4802 5.41144 13.5294 5.53982 13.5294H8.0421C8.47337 13.5294 8.68936 13.0267 8.3844 12.7327L1.32637 5.92856C1.02142 5.63456 0.5 5.84278 0.5 6.25854V8.67083ZM0.5 4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L10.0368 13.3927C10.1276 13.4802 10.2508 13.5294 10.3791 13.5294H12.8814C13.3127 13.5294 13.5287 13.0267 13.2237 12.7327L1.32637 1.26329C1.02142 0.969312 0.5 1.17752 0.5 1.59327V4.00556ZM5.33931 4.00556C5.33931 4.12932 5.39033 4.24802 5.4811 4.33554L14.1916 12.7327C14.4965 13.0267 15.0179 12.8185 15.0179 12.4028V9.99047C15.0179 9.86671 14.9669 9.74799 14.8762 9.66049L6.16568 1.26329C5.86071 0.969307 5.33931 1.17752 5.33931 1.59327V4.00556ZM11.005 1.26329C10.7 0.969307 10.1786 1.17752 10.1786 1.59327V4.00556C10.1786 4.12932 10.2296 4.24802 10.3204 4.33554L14.1916 8.06748C14.4965 8.36148 15.0179 8.15325 15.0179 7.7375V5.3252C15.0179 5.20144 14.9669 5.08272 14.8762 4.99522L11.005 1.26329Z\"\n                    fill=\"#F9BD2B\"\n                />\n                <path\n                    d=\"M21.0852 10.981L16.5288 6.58843C16.2238 6.29443 15.7024 6.50266 15.7024 6.91841V13.0627C15.7024 13.3205 15.9191 13.5294 16.1865 13.5294H23.2446C23.5119 13.5294 23.7287 13.3205 23.7287 13.0627V12.5032C23.7287 12.2455 23.511 12.0396 23.2459 12.0063C22.4323 11.9042 21.6713 11.546 21.0852 10.981ZM18.0252 12.0365C17.5978 12.0365 17.251 11.7021 17.251 11.2901C17.251 10.878 17.5978 10.5436 18.0252 10.5436C18.4527 10.5436 18.7996 10.878 18.7996 11.2901C18.7996 11.7021 18.4527 12.0365 18.0252 12.0365Z\"\n                    fill=\"currentColor\"\n                />\n                <path\n                    d=\"M0.5 13.0627C0.5 13.3205 0.716728 13.5294 0.984076 13.5294H3.20279C3.63405 13.5294 3.85003 13.0267 3.54508 12.7327L1.32637 10.5938C1.02142 10.2998 0.5 10.508 0.5 10.9238V13.0627ZM5.33931 5.13191L1.32637 1.26329C1.02142 0.969306 0.5 1.17752 0.5 1.59327V4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L5.33931 8.86412V5.13191ZM1.32637 5.92855C1.02142 5.63455 0.5 5.84278 0.5 6.25853V8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.33931 13.5294V9.79717L1.32637 5.92855Z\"\n                    fill=\"#1D4AFF\"\n                />\n                <path\n                    d=\"M10.1787 5.3252C10.1787 5.20144 10.1277 5.08272 10.0369 4.99522L6.16572 1.26329C5.8608 0.969306 5.33936 1.17752 5.33936 1.59327V4.00556C5.33936 4.12932 5.39037 4.24802 5.48114 4.33554L10.1787 8.86412V5.3252ZM5.33936 13.5294H8.04214C8.47341 13.5294 8.6894 13.0267 8.38443 12.7327L5.33936 9.79717V13.5294ZM5.33936 5.13191V8.67083C5.33936 8.79459 5.39037 8.91331 5.48114 9.00081L10.1787 13.5294V9.99047C10.1787 9.86671 10.1277 9.74803 10.0369 9.66049L5.33936 5.13191Z\"\n                    fill=\"#F54E00\"\n                />\n                <path\n                    d=\"M29.375 11.6667H31.3636V8.48772H33.0249C34.8499 8.48772 36.0204 7.4443 36.0204 5.83052C36.0204 4.21681 34.8499 3.17334 33.0249 3.17334H29.375V11.6667ZM31.3636 6.84972V4.81136H32.8236C33.5787 4.81136 34.0318 5.19958 34.0318 5.83052C34.0318 6.4615 33.5787 6.84972 32.8236 6.84972H31.3636ZM39.618 11.7637C41.5563 11.7637 42.9659 10.429 42.9659 8.60905C42.9659 6.78905 41.5563 5.45438 39.618 5.45438C37.6546 5.45438 36.2701 6.78905 36.2701 8.60905C36.2701 10.429 37.6546 11.7637 39.618 11.7637ZM38.1077 8.60905C38.1077 7.63838 38.7118 6.97105 39.618 6.97105C40.5116 6.97105 41.1157 7.63838 41.1157 8.60905C41.1157 9.57972 40.5116 10.2471 39.618 10.2471C38.7118 10.2471 38.1077 9.57972 38.1077 8.60905ZM46.1482 11.7637C47.6333 11.7637 48.6402 10.8658 48.6402 9.81025C48.6402 7.33505 45.2294 8.13585 45.2294 7.16518C45.2294 6.8983 45.5189 6.72843 45.9342 6.72843C46.3622 6.72843 46.8782 6.98318 47.0418 7.54132L48.527 6.94678C48.2375 6.06105 47.1677 5.45438 45.8713 5.45438C44.4743 5.45438 43.6058 6.25518 43.6058 7.21372C43.6058 9.53118 46.9663 8.88812 46.9663 9.84665C46.9663 10.1864 46.6391 10.417 46.1482 10.417C45.4434 10.417 44.9525 9.94376 44.8015 9.3735L43.3164 9.93158C43.6436 10.8537 44.6001 11.7637 46.1482 11.7637ZM53.4241 11.606L53.2982 10.0651C53.0843 10.1743 52.8074 10.2106 52.5808 10.2106C52.1278 10.2106 51.8257 9.89523 51.8257 9.34918V7.03172H53.3612V5.55145H51.8257V3.78001H49.9755V5.55145H48.9687V7.03172H49.9755V9.57972C49.9755 11.06 51.0202 11.7637 52.3921 11.7637C52.7696 11.7637 53.122 11.7031 53.4241 11.606ZM59.8749 3.17334V6.47358H56.376V3.17334H54.3874V11.6667H56.376V8.11158H59.8749V11.6667H61.8761V3.17334H59.8749ZM66.2899 11.7637C68.2281 11.7637 69.6378 10.429 69.6378 8.60905C69.6378 6.78905 68.2281 5.45438 66.2899 5.45438C64.3265 5.45438 62.942 6.78905 62.942 8.60905C62.942 10.429 64.3265 11.7637 66.2899 11.7637ZM64.7796 8.60905C64.7796 7.63838 65.3837 6.97105 66.2899 6.97105C67.1835 6.97105 67.7876 7.63838 67.7876 8.60905C67.7876 9.57972 67.1835 10.2471 66.2899 10.2471C65.3837 10.2471 64.7796 9.57972 64.7796 8.60905ZM73.2088 11.4725C73.901 11.4725 74.5177 11.242 74.845 10.8416V11.424C74.845 12.1034 74.2786 12.5767 73.4102 12.5767C72.7935 12.5767 72.2523 12.2854 72.1642 11.788L70.4776 12.0428C70.7042 13.1955 71.925 13.972 73.4102 13.972C75.361 13.972 76.6574 12.8679 76.6574 11.2298V5.55145H74.8324V6.07318C74.4926 5.69705 73.9136 5.45438 73.171 5.45438C71.409 5.45438 70.3014 6.61918 70.3014 8.46345C70.3014 10.3077 71.409 11.4725 73.2088 11.4725ZM72.1012 8.46345C72.1012 7.55345 72.655 6.97105 73.5109 6.97105C74.3793 6.97105 74.9331 7.55345 74.9331 8.46345C74.9331 9.37345 74.3793 9.95585 73.5109 9.95585C72.655 9.95585 72.1012 9.37345 72.1012 8.46345Z\"\n                    fill=\"currentColor\"\n                />\n            </g>\n        </g>\n        <defs>\n            <clipPath id=\"clip0_2415_6911\">\n                <rect width=\"76\" height=\"14\" fill=\"white\" transform=\"translate(0.5)\" />\n            </clipPath>\n        </defs>\n    </svg>\n)\nexport const checkSVG = (\n    <svg width=\"16\" height=\"12\" viewBox=\"0 0 16 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.30769 10.6923L4.77736 11.2226C4.91801 11.3633 5.10878 11.4423 5.30769 11.4423C5.5066 11.4423 5.69737 11.3633 5.83802 11.2226L5.30769 10.6923ZM15.5303 1.53033C15.8232 1.23744 15.8232 0.762563 15.5303 0.46967C15.2374 0.176777 14.7626 0.176777 14.4697 0.46967L15.5303 1.53033ZM1.53033 5.85429C1.23744 5.56139 0.762563 5.56139 0.46967 5.85429C0.176777 6.14718 0.176777 6.62205 0.46967 6.91495L1.53033 5.85429ZM5.83802 11.2226L15.5303 1.53033L14.4697 0.46967L4.77736 10.162L5.83802 11.2226ZM0.46967 6.91495L4.77736 11.2226L5.83802 10.162L1.53033 5.85429L0.46967 6.91495Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n)\n","import { IconPosthogLogo } from '../icons'\n// import { getContrastingTextColor } from '../surveys-utils'\n\nexport function PostHogLogo() {\n    // const textColor = getContrastingTextColor(backgroundColor)\n\n    return (\n        <a\n            href=\"https://posthog.com\"\n            target=\"_blank\"\n            rel=\"noopener\"\n            // style={{ backgroundColor: backgroundColor, color: textColor }}\n            className=\"footer-branding\"\n        >\n            Survey by {IconPosthogLogo}\n        </a>\n    )\n}\n","import { window } from '../../../utils/globals'\n\nimport { SurveyAppearance } from '../../../posthog-surveys-types'\n\nimport { useContext } from 'preact/hooks'\nimport { SurveyContext, defaultSurveyAppearance, getContrastingTextColor } from '../surveys-extension-utils'\nimport { PostHogLogo } from './PostHogLogo'\n\nexport function BottomSection({\n    text,\n    submitDisabled,\n    appearance,\n    onSubmit,\n    link,\n    onPreviewSubmit,\n}: {\n    text: string\n    submitDisabled: boolean\n    appearance: SurveyAppearance\n    onSubmit: () => void\n    link?: string | null\n    onPreviewSubmit?: () => void\n}) {\n    const { isPreviewMode, isPopup } = useContext(SurveyContext)\n    const textColor =\n        appearance.submitButtonTextColor ||\n        getContrastingTextColor(appearance.submitButtonColor || defaultSurveyAppearance.submitButtonColor)\n    return (\n        <div className=\"bottom-section\">\n            <div className=\"buttons\">\n                <button\n                    className=\"form-submit\"\n                    disabled={submitDisabled}\n                    aria-label=\"Submit survey\"\n                    type=\"button\"\n                    style={isPopup ? { color: textColor } : {}}\n                    onClick={() => {\n                        if (link) {\n                            window?.open(link)\n                        }\n                        if (isPreviewMode) {\n                            onPreviewSubmit?.()\n                        } else {\n                            onSubmit()\n                        }\n                    }}\n                >\n                    {text}\n                </button>\n            </div>\n            {!appearance.whiteLabel && <PostHogLogo />}\n        </div>\n    )\n}\n","import { h } from 'preact'\nimport { useContext } from 'preact/hooks'\nimport { SurveyQuestionDescriptionContentType } from '../../../posthog-surveys-types'\nimport { cancelSVG } from '../icons'\nimport { SurveyContext, defaultSurveyAppearance, renderChildrenAsTextOrHtml } from '../surveys-extension-utils'\n\nexport function QuestionHeader({\n    question,\n    description,\n    descriptionContentType,\n    backgroundColor,\n    forceDisableHtml,\n}: {\n    question: string\n    description?: string | null\n    descriptionContentType?: SurveyQuestionDescriptionContentType\n    forceDisableHtml: boolean\n    backgroundColor?: string\n}) {\n    const { isPopup } = useContext(SurveyContext)\n    return (\n        <div style={isPopup ? { backgroundColor: backgroundColor || defaultSurveyAppearance.backgroundColor } : {}}>\n            <div className=\"survey-question\">{question}</div>\n            {description &&\n                renderChildrenAsTextOrHtml({\n                    component: h('div', { className: 'survey-question-description' }),\n                    children: description,\n                    renderAsHtml: !forceDisableHtml && descriptionContentType !== 'text',\n                })}\n        </div>\n    )\n}\n\nexport function Cancel({ onClick }: { onClick: () => void }) {\n    const { isPreviewMode } = useContext(SurveyContext)\n\n    return (\n        <button\n            className=\"form-cancel\"\n            onClick={onClick}\n            disabled={isPreviewMode}\n            aria-label=\"Close survey\"\n            type=\"button\"\n        >\n            {cancelSVG}\n        </button>\n    )\n}\n","import { h } from 'preact'\nimport { SurveyAppearance, SurveyQuestionDescriptionContentType } from '../../../posthog-surveys-types'\nimport {\n    defaultSurveyAppearance,\n    getContrastingTextColor,\n    renderChildrenAsTextOrHtml,\n} from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { Cancel } from './QuestionHeader'\n\nimport { useContext } from 'preact/hooks'\nimport { SurveyContext } from '../surveys-extension-utils'\n\nexport function ConfirmationMessage({\n    header,\n    description,\n    contentType,\n    forceDisableHtml,\n    appearance,\n    onClose,\n    styleOverrides,\n}: {\n    header: string\n    description: string\n    forceDisableHtml: boolean\n    contentType?: SurveyQuestionDescriptionContentType\n    appearance: SurveyAppearance\n    onClose: () => void\n    styleOverrides?: React.CSSProperties\n}) {\n    const textColor = getContrastingTextColor(appearance.backgroundColor || defaultSurveyAppearance.backgroundColor)\n\n    const { isPopup } = useContext(SurveyContext)\n\n    return (\n        <div className=\"thank-you-message\" style={{ ...styleOverrides }}>\n            <div className=\"thank-you-message-container\">\n                {isPopup && <Cancel onClick={() => onClose()} />}\n                <h3 className=\"thank-you-message-header\" style={{ color: textColor }}>\n                    {header}\n                </h3>\n                {description &&\n                    renderChildrenAsTextOrHtml({\n                        component: h('div', { className: 'thank-you-message-body' }),\n                        children: description,\n                        renderAsHtml: !forceDisableHtml && contentType !== 'text',\n                        style: { color: textColor },\n                    })}\n                {isPopup && (\n                    <BottomSection\n                        text={appearance.thankYouMessageCloseButtonText || 'Close'}\n                        submitDisabled={false}\n                        appearance={appearance}\n                        onSubmit={() => onClose()}\n                    />\n                )}\n            </div>\n        </div>\n    )\n}\n","import { Fragment } from 'preact'\nimport { useMemo, useRef, useState } from 'preact/hooks'\nimport {\n    BasicSurveyQuestion,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    SurveyAppearance,\n    SurveyQuestionType,\n} from '../../../posthog-surveys-types'\nimport { isArray, isNull, isNumber, isString } from '../../../utils/type-utils'\nimport {\n    checkSVG,\n    dissatisfiedEmoji,\n    neutralEmoji,\n    satisfiedEmoji,\n    veryDissatisfiedEmoji,\n    verySatisfiedEmoji,\n} from '../icons'\nimport { getContrastingTextColor, getDisplayOrderChoices } from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { QuestionHeader } from './QuestionHeader'\n\nexport interface CommonQuestionProps {\n    forceDisableHtml: boolean\n    appearance: SurveyAppearance\n    onSubmit: (res: string | string[] | number | null) => void\n    onPreviewSubmit: (res: string | string[] | number | null) => void\n    initialValue?: string | string[] | number | null\n}\n\nexport function OpenTextQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: BasicSurveyQuestion\n}) {\n    const [text, setText] = useState<string>(() => {\n        if (isString(initialValue)) {\n            return initialValue\n        }\n        return ''\n    })\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    backgroundColor={appearance.backgroundColor}\n                    forceDisableHtml={forceDisableHtml}\n                />\n                <textarea\n                    rows={4}\n                    placeholder={appearance?.placeholder}\n                    onInput={(e) => {\n                        setText(e.currentTarget.value)\n                        e.stopPropagation()\n                    }}\n                    onKeyDown={(e) => {\n                        e.stopPropagation()\n                    }}\n                    value={text}\n                />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={!text && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(text)}\n                onPreviewSubmit={() => onPreviewSubmit(text)}\n            />\n        </Fragment>\n    )\n}\n\nexport function LinkQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n}: CommonQuestionProps & {\n    question: LinkSurveyQuestion\n}) {\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={false}\n                link={question.link}\n                appearance={appearance}\n                onSubmit={() => onSubmit('link clicked')}\n                onPreviewSubmit={() => onPreviewSubmit('link clicked')}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: RatingSurveyQuestion\n    displayQuestionIndex: number\n}) {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const [rating, setRating] = useState<number | null>(() => {\n        if (isNumber(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue) && initialValue.length > 0 && isNumber(parseInt(initialValue[0]))) {\n            return parseInt(initialValue[0])\n        }\n        if (isString(initialValue) && isNumber(parseInt(initialValue))) {\n            return parseInt(initialValue)\n        }\n        return null\n    })\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                    backgroundColor={appearance.backgroundColor}\n                />\n                <div className=\"rating-section\">\n                    <div className=\"rating-options\">\n                        {question.display === 'emoji' && (\n                            <div className=\"rating-options-emoji\">\n                                {(question.scale === 3 ? threeScaleEmojis : fiveScaleEmojis).map((emoji, idx) => {\n                                    const active = idx + 1 === rating\n                                    return (\n                                        <button\n                                            className={`ratings-emoji question-${displayQuestionIndex}-rating-${idx} ${\n                                                active ? 'rating-active' : ''\n                                            }`}\n                                            value={idx + 1}\n                                            key={idx}\n                                            type=\"button\"\n                                            onClick={() => {\n                                                setRating(idx + 1)\n                                            }}\n                                            style={{\n                                                fill: active\n                                                    ? appearance.ratingButtonActiveColor\n                                                    : appearance.ratingButtonColor,\n                                                borderColor: appearance.borderColor,\n                                            }}\n                                        >\n                                            {emoji}\n                                        </button>\n                                    )\n                                })}\n                            </div>\n                        )}\n                        {question.display === 'number' && (\n                            <div\n                                className=\"rating-options-number\"\n                                style={{ gridTemplateColumns: `repeat(${scale - starting + 1}, minmax(0, 1fr))` }}\n                            >\n                                {getScaleNumbers(question.scale).map((number, idx) => {\n                                    const active = rating === number\n                                    return (\n                                        <RatingButton\n                                            key={idx}\n                                            displayQuestionIndex={displayQuestionIndex}\n                                            active={active}\n                                            appearance={appearance}\n                                            num={number}\n                                            setActiveNumber={(num) => {\n                                                setRating(num)\n                                            }}\n                                        />\n                                    )\n                                })}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"rating-text\">\n                        <div>{question.lowerBoundLabel}</div>\n                        <div>{question.upperBoundLabel}</div>\n                    </div>\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || appearance?.submitButtonText || 'Submit'}\n                submitDisabled={isNull(rating) && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(rating)}\n                onPreviewSubmit={() => onPreviewSubmit(rating)}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingButton({\n    num,\n    active,\n    displayQuestionIndex,\n    appearance,\n    setActiveNumber,\n}: {\n    num: number\n    active: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    setActiveNumber: (num: number) => void\n}) {\n    return (\n        <button\n            className={`ratings-number question-${displayQuestionIndex}-rating-${num} ${active ? 'rating-active' : ''}`}\n            type=\"button\"\n            onClick={() => {\n                setActiveNumber(num)\n            }}\n            style={{\n                color: getContrastingTextColor(\n                    active ? appearance.ratingButtonActiveColor : appearance.ratingButtonColor\n                ),\n                backgroundColor: active ? appearance.ratingButtonActiveColor : appearance.ratingButtonColor,\n                borderColor: appearance.borderColor,\n            }}\n        >\n            {num}\n        </button>\n    )\n}\n\nfunction isSubmitDisabled(\n    selectedChoices: string | string[] | null,\n    openChoiceSelected: boolean,\n    openEndedInput: string,\n    optional: boolean\n): boolean {\n    if (optional) {\n        return false\n    }\n\n    if (isNull(selectedChoices)) {\n        return true\n    }\n\n    if (isArray(selectedChoices)) {\n        if (!openChoiceSelected && selectedChoices.length === 0) {\n            return true\n        }\n        if (openChoiceSelected && !openEndedInput && selectedChoices.length === 0) {\n            return true\n        }\n    }\n\n    return false\n}\n\nexport function MultipleChoiceQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: MultipleSurveyQuestion\n    displayQuestionIndex: number\n}) {\n    const openChoiceInputRef = useRef<HTMLInputElement>(null)\n    const choices = useMemo(() => getDisplayOrderChoices(question), [question])\n    const [selectedChoices, setSelectedChoices] = useState<string | string[] | null>(() => {\n        if (isString(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue)) {\n            return initialValue\n        }\n        return question.type === SurveyQuestionType.SingleChoice ? null : []\n    })\n    const [openChoiceSelected, setOpenChoiceSelected] = useState(() => {\n        if (isString(initialValue)) {\n            return !choices.includes(initialValue)\n        }\n        if (isArray(initialValue)) {\n            // check if initialValue IS NOT in choices\n            return !choices.some((choice) => initialValue.includes(choice))\n        }\n        return false\n    })\n    const [openEndedInput, setOpenEndedInput] = useState(() => {\n        if (isString(initialValue) && !choices.includes(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue)) {\n            return initialValue.find((choice) => !choices.includes(choice)) || ''\n        }\n        return ''\n    })\n\n    const inputType = question.type === SurveyQuestionType.SingleChoice ? 'radio' : 'checkbox'\n\n    const handleChoiceChange = (val: string, isOpenChoice: boolean) => {\n        if (isOpenChoice) {\n            setOpenChoiceSelected(!openChoiceSelected)\n            // Focus the input when open choice is selected\n            if (!openChoiceSelected) {\n                // Use a small delay to ensure the focus happens after the state update\n                setTimeout(() => openChoiceInputRef.current?.focus(), 0)\n            }\n            return\n        }\n\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            setSelectedChoices(val)\n            setOpenChoiceSelected(false) // Deselect open choice when selecting another option\n            return\n        }\n\n        if (question.type === SurveyQuestionType.MultipleChoice && isArray(selectedChoices)) {\n            if (selectedChoices.includes(val)) {\n                setSelectedChoices(selectedChoices.filter((choice) => choice !== val))\n            } else {\n                setSelectedChoices([...selectedChoices, val])\n            }\n        }\n    }\n\n    const handleOpenEndedInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        e.stopPropagation()\n        setOpenEndedInput(e.currentTarget.value)\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            setSelectedChoices(e.currentTarget.value)\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                    backgroundColor={appearance.backgroundColor}\n                />\n                <div className=\"multiple-choice-options limit-height\">\n                    {choices.map((choice: string, idx: number) => {\n                        const isOpenChoice = !!question.hasOpenChoice && idx === question.choices.length - 1\n                        const choiceClass = `choice-option${isOpenChoice ? ' choice-option-open' : ''}`\n\n                        const isChecked = isOpenChoice\n                            ? openChoiceSelected\n                            : question.type === SurveyQuestionType.SingleChoice\n                              ? selectedChoices === choice\n                              : isArray(selectedChoices) && selectedChoices.includes(choice)\n\n                        return (\n                            <div className={choiceClass} key={idx}>\n                                <input\n                                    type={inputType}\n                                    id={`surveyQuestion${displayQuestionIndex}Choice${idx}`}\n                                    name={`question${displayQuestionIndex}`}\n                                    checked={isChecked}\n                                    onClick={() => handleChoiceChange(choice, isOpenChoice)}\n                                />\n                                <label\n                                    htmlFor={`surveyQuestion${displayQuestionIndex}Choice${idx}`}\n                                    style={{ color: 'black' }}\n                                >\n                                    {isOpenChoice ? (\n                                        <>\n                                            <span>{choice}:</span>\n                                            <input\n                                                type=\"text\"\n                                                ref={openChoiceInputRef}\n                                                id={`surveyQuestion${displayQuestionIndex}Choice${idx}Open`}\n                                                name={`question${displayQuestionIndex}`}\n                                                value={openEndedInput}\n                                                onKeyDown={(e) => {\n                                                    e.stopPropagation()\n                                                }}\n                                                onInput={(e) => handleOpenEndedInputChange(e)}\n                                                onClick={(e) => {\n                                                    // Ensure the checkbox/radio gets checked when clicking the input\n                                                    if (!openChoiceSelected) {\n                                                        handleChoiceChange(choice, true)\n                                                    }\n                                                    e.stopPropagation()\n                                                }}\n                                            />\n                                        </>\n                                    ) : (\n                                        choice\n                                    )}\n                                </label>\n                                <span className=\"choice-check\" style={{ color: 'black' }}>\n                                    {checkSVG}\n                                </span>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={isSubmitDisabled(\n                    selectedChoices,\n                    openChoiceSelected,\n                    openEndedInput,\n                    !!question.optional\n                )}\n                appearance={appearance}\n                onSubmit={() => {\n                    if (openChoiceSelected && question.type === SurveyQuestionType.MultipleChoice) {\n                        if (isArray(selectedChoices)) {\n                            onSubmit([...selectedChoices, openEndedInput])\n                        }\n                    } else {\n                        onSubmit(selectedChoices)\n                    }\n                }}\n                onPreviewSubmit={() => {\n                    if (openChoiceSelected && question.type === SurveyQuestionType.MultipleChoice) {\n                        if (isArray(selectedChoices)) {\n                            onPreviewSubmit([...selectedChoices, openEndedInput])\n                        }\n                    } else {\n                        onPreviewSubmit(selectedChoices)\n                    }\n                }}\n            />\n        </Fragment>\n    )\n}\n\nconst threeScaleEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\nconst fiveScaleEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\nconst fiveScaleNumbers = [1, 2, 3, 4, 5]\nconst sevenScaleNumbers = [1, 2, 3, 4, 5, 6, 7]\nconst tenScaleNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfunction getScaleNumbers(scale: number): number[] {\n    switch (scale) {\n        case 5:\n            return fiveScaleNumbers\n        case 7:\n            return sevenScaleNumbers\n        case 10:\n            return tenScaleNumbers\n        default:\n            return fiveScaleNumbers\n    }\n}\n","import * as Preact from 'preact'\nimport { useContext, useEffect, useMemo, useState } from 'preact/hooks'\nimport { PostHog } from '../posthog-core'\nimport {\n    Survey,\n    SurveyCallback,\n    SurveyPosition,\n    SurveyQuestion,\n    SurveyQuestionBranchingType,\n    SurveyQuestionType,\n    SurveySchedule,\n    SurveyType,\n    SurveyWidgetType,\n} from '../posthog-surveys-types'\nimport { addEventListener } from '../utils'\nimport { document as _document, window as _window } from '../utils/globals'\nimport {\n    doesSurveyActivateByAction,\n    doesSurveyActivateByEvent,\n    isSurveyRunning,\n    SURVEY_LOGGER as logger,\n} from '../utils/survey-utils'\nimport { isNull, isNumber } from '../utils/type-utils'\nimport { uuidv7 } from '../uuidv7'\nimport { createWidgetStylesheet, retrieveWidgetShadow } from './surveys-widget'\nimport { ConfirmationMessage } from './surveys/components/ConfirmationMessage'\nimport { Cancel } from './surveys/components/QuestionHeader'\nimport {\n    CommonQuestionProps,\n    LinkQuestion,\n    MultipleChoiceQuestion,\n    OpenTextQuestion,\n    RatingQuestion,\n} from './surveys/components/QuestionTypes'\nimport {\n    canActivateRepeatedly,\n    createShadow,\n    defaultSurveyAppearance,\n    dismissedSurveyEvent,\n    doesSurveyDeviceTypesMatch,\n    doesSurveyMatchSelector,\n    doesSurveyUrlMatch,\n    getContrastingTextColor,\n    getDisplayOrderQuestions,\n    getInProgressSurveyState,\n    getSurveyContainerClass,\n    getSurveyResponseKey,\n    getSurveySeen,\n    hasWaitPeriodPassed,\n    isSurveyInProgress,\n    sendSurveyEvent,\n    setInProgressSurveyState,\n    style,\n    SurveyContext,\n} from './surveys/surveys-extension-utils'\nimport { prepareStylesheet } from './utils/stylesheet-loader'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nconst DISPATCH_FEEDBACK_WIDGET_EVENT = 'ph:show_survey_widget'\n\nfunction getRatingBucketForResponseValue(responseValue: number, scale: number) {\n    if (scale === 3) {\n        if (responseValue < 1 || responseValue > 3) {\n            throw new Error('The response must be in range 1-3')\n        }\n\n        return responseValue === 1 ? 'negative' : responseValue === 2 ? 'neutral' : 'positive'\n    } else if (scale === 5) {\n        if (responseValue < 1 || responseValue > 5) {\n            throw new Error('The response must be in range 1-5')\n        }\n\n        return responseValue <= 2 ? 'negative' : responseValue === 3 ? 'neutral' : 'positive'\n    } else if (scale === 7) {\n        if (responseValue < 1 || responseValue > 7) {\n            throw new Error('The response must be in range 1-7')\n        }\n\n        return responseValue <= 3 ? 'negative' : responseValue === 4 ? 'neutral' : 'positive'\n    } else if (scale === 10) {\n        if (responseValue < 0 || responseValue > 10) {\n            throw new Error('The response must be in range 0-10')\n        }\n\n        return responseValue <= 6 ? 'detractors' : responseValue <= 8 ? 'passives' : 'promoters'\n    }\n\n    throw new Error('The scale must be one of: 3, 5, 7, 10')\n}\n\nexport function getNextSurveyStep(\n    survey: Survey,\n    currentQuestionIndex: number,\n    response: string | string[] | number | null\n) {\n    const question = survey.questions[currentQuestionIndex]\n    const nextQuestionIndex = currentQuestionIndex + 1\n\n    if (!question.branching?.type) {\n        if (currentQuestionIndex === survey.questions.length - 1) {\n            return SurveyQuestionBranchingType.End\n        }\n\n        return nextQuestionIndex\n    }\n\n    if (question.branching.type === SurveyQuestionBranchingType.End) {\n        return SurveyQuestionBranchingType.End\n    } else if (question.branching.type === SurveyQuestionBranchingType.SpecificQuestion) {\n        if (Number.isInteger(question.branching.index)) {\n            return question.branching.index\n        }\n    } else if (question.branching.type === SurveyQuestionBranchingType.ResponseBased) {\n        // Single choice\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            // :KLUDGE: for now, look up the choiceIndex based on the response\n            // TODO: once QuestionTypes.MultipleChoiceQuestion is refactored, pass the selected choiceIndex into this method\n            let selectedChoiceIndex = question.choices.indexOf(`${response}`)\n\n            if (selectedChoiceIndex === -1 && question.hasOpenChoice) {\n                // if the response is not found in the choices, it must be the open choice,\n                // which is always the last choice\n                selectedChoiceIndex = question.choices.length - 1\n            }\n\n            if (question.branching?.responseValues?.hasOwnProperty(selectedChoiceIndex)) {\n                const nextStep = question.branching.responseValues[selectedChoiceIndex]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        } else if (question.type === SurveyQuestionType.Rating) {\n            if (typeof response !== 'number' || !Number.isInteger(response)) {\n                throw new Error('The response type must be an integer')\n            }\n\n            const ratingBucket = getRatingBucketForResponseValue(response, question.scale)\n\n            if (question.branching?.responseValues?.hasOwnProperty(ratingBucket)) {\n                const nextStep = question.branching.responseValues[ratingBucket]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        }\n\n        return nextQuestionIndex\n    }\n\n    logger.warn('Falling back to next question index due to unexpected branching type')\n    return nextQuestionIndex\n}\n\nexport class SurveyManager {\n    private _posthog: PostHog\n    private _surveyInFocus: string | null\n    private _surveyTimeouts: Map<string, NodeJS.Timeout> = new Map()\n    private _widgetSelectorListeners: Map<string, { element: Element; listener: EventListener }> = new Map()\n\n    constructor(posthog: PostHog) {\n        this._posthog = posthog\n        // This is used to track the survey that is currently in focus. We only show one survey at a time.\n        this._surveyInFocus = null\n    }\n\n    private _clearSurveyTimeout(surveyId: string) {\n        const timeout = this._surveyTimeouts.get(surveyId)\n        if (timeout) {\n            clearTimeout(timeout)\n            this._surveyTimeouts.delete(surveyId)\n        }\n    }\n\n    private _handlePopoverSurvey = (survey: Survey): void => {\n        const surveyWaitPeriodInDays = survey.conditions?.seenSurveyWaitPeriodInDays\n        const lastSeenSurveyDate = localStorage.getItem(`lastSeenSurveyDate`)\n\n        if (!hasWaitPeriodPassed(lastSeenSurveyDate, surveyWaitPeriodInDays)) {\n            return\n        }\n\n        const surveySeen = getSurveySeen(survey)\n        if (!surveySeen) {\n            this._clearSurveyTimeout(survey.id)\n            this._addSurveyToFocus(survey.id)\n            const delaySeconds = survey.appearance?.surveyPopupDelaySeconds || 0\n            const shadow = createShadow(style(survey?.appearance), survey.id, undefined, this._posthog)\n            if (delaySeconds <= 0) {\n                return Preact.render(\n                    <SurveyPopup\n                        key={'popover-survey'}\n                        posthog={this._posthog}\n                        survey={survey}\n                        removeSurveyFromFocus={this._removeSurveyFromFocus}\n                    />,\n                    shadow\n                )\n            }\n            const timeoutId = setTimeout(() => {\n                if (!doesSurveyUrlMatch(survey)) {\n                    return this._removeSurveyFromFocus(survey.id)\n                }\n                // rendering with surveyPopupDelaySeconds = 0 because we're already handling the timeout here\n                Preact.render(\n                    <SurveyPopup\n                        key={'popover-survey'}\n                        posthog={this._posthog}\n                        survey={{ ...survey, appearance: { ...survey.appearance, surveyPopupDelaySeconds: 0 } }}\n                        removeSurveyFromFocus={this._removeSurveyFromFocus}\n                    />,\n                    shadow\n                )\n            }, delaySeconds * 1000)\n            this._surveyTimeouts.set(survey.id, timeoutId)\n        }\n    }\n\n    private _handleWidget = (survey: Survey): void => {\n        // Ensure widget container exists if it doesn't\n        const shadow = retrieveWidgetShadow(survey, this._posthog)\n        const stylesheetContent = style(survey.appearance)\n        const WIDGET_STYLE_ID = 'ph-data-style-id'\n\n        // Check if the stylesheet already exists\n        if (!shadow.querySelector(`style[${WIDGET_STYLE_ID}=\"${WIDGET_STYLE_ID}\"]`)) {\n            const stylesheet = prepareStylesheet(document, stylesheetContent, this._posthog)\n\n            if (stylesheet) {\n                stylesheet.setAttribute(WIDGET_STYLE_ID, WIDGET_STYLE_ID) // Add identifier\n                shadow.appendChild(stylesheet)\n            }\n        }\n\n        Preact.render(\n            <FeedbackWidget\n                key={'feedback-survey-' + survey.id} // Use unique key\n                posthog={this._posthog}\n                survey={survey}\n                removeSurveyFromFocus={this._removeSurveyFromFocus}\n            />,\n            shadow\n        )\n    }\n\n    private _removeWidgetSelectorListener = (surveyId: string): void => {\n        const existing = this._widgetSelectorListeners.get(surveyId)\n        if (existing) {\n            existing.element.removeEventListener('click', existing.listener)\n            existing.element.removeAttribute('PHWidgetSurveyClickListener')\n            this._widgetSelectorListeners.delete(surveyId)\n            logger.info(`Removed click listener for survey ${surveyId}`)\n        }\n    }\n\n    private _manageWidgetSelectorListener = (survey: Survey): void => {\n        const selector = survey.appearance?.widgetSelector\n        if (!selector) {\n            return\n        }\n\n        const currentElement = document.querySelector(selector)\n        const existingListenerData = this._widgetSelectorListeners.get(survey.id)\n\n        if (!currentElement) {\n            // Element not found, remove listener if it exists\n            if (existingListenerData) {\n                this._removeWidgetSelectorListener(survey.id)\n            }\n            return\n        }\n\n        // Ensure the base widget is rendered first if needed\n        this._handleWidget(survey)\n\n        if (existingListenerData) {\n            // Listener exists, check if element changed\n            if (currentElement !== existingListenerData.element) {\n                logger.info(`Selector element changed for survey ${survey.id}. Re-attaching listener.`)\n                this._removeWidgetSelectorListener(survey.id)\n                // Continue to attach listener to the new element below\n            } else {\n                // Element is the same, listener already attached, do nothing\n                return\n            }\n        }\n\n        // Element found, and no listener attached (or it was just removed from old element)\n        if (!currentElement.hasAttribute('PHWidgetSurveyClickListener')) {\n            const listener = (event: Event) => {\n                event.stopPropagation() // Prevent bubbling\n\n                if (survey.appearance?.position !== SurveyPosition.NextToTrigger) {\n                    window.dispatchEvent(\n                        new CustomEvent(DISPATCH_FEEDBACK_WIDGET_EVENT, {\n                            detail: { surveyId: survey.id, position: {} },\n                        })\n                    )\n                    return\n                }\n\n                const buttonRect = (event.currentTarget as HTMLElement).getBoundingClientRect()\n                const viewportHeight = window.innerHeight\n                const viewportWidth = window.innerWidth\n                const surveyWidth = parseInt(survey.appearance?.maxWidth || '300')\n                const estimatedMinSurveyHeight = 250 // Keep this estimation\n                const buttonCenterX = buttonRect.left + buttonRect.width / 2\n                let left = buttonCenterX - surveyWidth / 2\n                const horizontalPadding = 20\n                if (left + surveyWidth > viewportWidth - horizontalPadding) {\n                    left = viewportWidth - surveyWidth - horizontalPadding\n                }\n                if (left < horizontalPadding) {\n                    left = horizontalPadding\n                }\n                const spacing = 12\n                const spaceBelow = viewportHeight - buttonRect.bottom\n                const spaceAbove = buttonRect.top\n                const showAbove = spaceBelow < estimatedMinSurveyHeight && spaceAbove > spaceBelow\n\n                const positionStyles: React.CSSProperties = {\n                    position: 'fixed',\n                    top: showAbove ? 'auto' : `${buttonRect.bottom + spacing}px`,\n                    left: `${left}px`,\n                    right: 'auto',\n                    bottom: showAbove ? `${viewportHeight - buttonRect.top + spacing}px` : 'auto',\n                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n                    borderBottom: `1.5px solid ${survey.appearance?.borderColor || '#c9c6c6'}`,\n                    borderRadius: '10px',\n                    zIndex: defaultSurveyAppearance.zIndex,\n                }\n\n                // Dispatch event for the FeedbackWidget to catch\n                window.dispatchEvent(\n                    new CustomEvent(DISPATCH_FEEDBACK_WIDGET_EVENT, {\n                        detail: { surveyId: survey.id, position: positionStyles },\n                    })\n                )\n            }\n\n            addEventListener(currentElement, 'click', listener)\n            currentElement.setAttribute('PHWidgetSurveyClickListener', 'true')\n            this._widgetSelectorListeners.set(survey.id, { element: currentElement, listener })\n            logger.info(`Attached click listener for feedback button survey ${survey.id}`)\n        }\n    }\n\n    /**\n     * Sorts surveys by their appearance delay in ascending order. If a survey does not have an appearance delay,\n     * it is considered to have a delay of 0.\n     * @param surveys\n     * @returns The surveys sorted by their appearance delay\n     */\n    private _sortSurveysByAppearanceDelay(surveys: Survey[]): Survey[] {\n        return surveys.sort((a, b) => {\n            const isSurveyInProgressA = isSurveyInProgress(a)\n            const isSurveyInProgressB = isSurveyInProgress(b)\n            if (isSurveyInProgressA && !isSurveyInProgressB) {\n                return -1 // a comes before b (in progress surveys first)\n            }\n            if (!isSurveyInProgressA && isSurveyInProgressB) {\n                return 1 // a comes after b (in progress surveys first)\n            }\n            const aIsAlways = a.schedule === SurveySchedule.Always\n            const bIsAlways = b.schedule === SurveySchedule.Always\n\n            if (aIsAlways && !bIsAlways) {\n                return 1 // a comes after b\n            }\n            if (!aIsAlways && bIsAlways) {\n                return -1 // a comes before b\n            }\n            // If both are Always or neither is Always, sort by delay\n            return (a.appearance?.surveyPopupDelaySeconds || 0) - (b.appearance?.surveyPopupDelaySeconds || 0)\n        })\n    }\n\n    public renderSurvey = (survey: Survey, selector: Element): void => {\n        Preact.render(\n            <SurveyPopup\n                key={'popover-survey'}\n                posthog={this._posthog}\n                survey={survey}\n                removeSurveyFromFocus={this._removeSurveyFromFocus}\n                isPopup={false}\n            />,\n            selector\n        )\n    }\n\n    private _isSurveyFeatureFlagEnabled(flagKey: string | null) {\n        if (!flagKey) {\n            return true\n        }\n        return !!this._posthog.featureFlags.isFeatureEnabled(flagKey)\n    }\n\n    private _isSurveyConditionMatched(survey: Survey): boolean {\n        if (!survey.conditions) {\n            return true\n        }\n        return doesSurveyUrlMatch(survey) && doesSurveyDeviceTypesMatch(survey) && doesSurveyMatchSelector(survey)\n    }\n\n    private _internalFlagCheckSatisfied(survey: Survey): boolean {\n        return (\n            canActivateRepeatedly(survey) ||\n            this._isSurveyFeatureFlagEnabled(survey.internal_targeting_flag_key) ||\n            isSurveyInProgress(survey)\n        )\n    }\n\n    public checkSurveyEligibility(survey: Survey): { eligible: boolean; reason?: string } {\n        const eligibility = { eligible: true, reason: undefined as string | undefined }\n\n        if (!isSurveyRunning(survey)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey is not running. It was completed on ${survey.end_date}`\n            return eligibility\n        }\n\n        if (!this._isSurveyFeatureFlagEnabled(survey.linked_flag_key)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey linked feature flag is not enabled`\n            return eligibility\n        }\n\n        if (!this._isSurveyFeatureFlagEnabled(survey.targeting_flag_key)) {\n            eligibility.eligible = false\n            eligibility.reason = `Survey targeting feature flag is not enabled`\n            return eligibility\n        }\n\n        if (!this._internalFlagCheckSatisfied(survey)) {\n            eligibility.eligible = false\n            eligibility.reason =\n                'Survey internal targeting flag is not enabled and survey cannot activate repeatedly and survey is not in progress'\n            return eligibility\n        }\n\n        return eligibility\n    }\n\n    /**\n     * Surveys can be activated by events or actions. This method checks if the survey has events and actions,\n     * and if so, it checks if the survey has been activated.\n     * @param survey\n     */\n    private _hasActionOrEventTriggeredSurvey(survey: Survey): boolean {\n        if (!doesSurveyActivateByEvent(survey) && !doesSurveyActivateByAction(survey)) {\n            // If survey doesn't depend on events/actions, it's considered \"triggered\" by default\n            return true\n        }\n        const surveysActivatedByEventsOrActions: string[] | undefined =\n            this._posthog.surveys._surveyEventReceiver?.getSurveys()\n        return !!surveysActivatedByEventsOrActions?.includes(survey.id)\n    }\n\n    private _checkFlags(survey: Survey): boolean {\n        if (!survey.feature_flag_keys?.length) {\n            return true\n        }\n\n        return survey.feature_flag_keys.every(({ key, value }) => {\n            if (!key || !value) {\n                return true\n            }\n            return this._posthog.featureFlags.isFeatureEnabled(value)\n        })\n    }\n\n    public getActiveMatchingSurveys = (callback: SurveyCallback, forceReload = false): void => {\n        this._posthog?.surveys.getSurveys((surveys) => {\n            const targetingMatchedSurveys = surveys.filter((survey) => {\n                const eligibility = this.checkSurveyEligibility(survey)\n                return (\n                    eligibility.eligible &&\n                    this._isSurveyConditionMatched(survey) &&\n                    this._hasActionOrEventTriggeredSurvey(survey) &&\n                    this._checkFlags(survey)\n                )\n            })\n\n            callback(targetingMatchedSurveys)\n        }, forceReload)\n    }\n\n    public callSurveysAndEvaluateDisplayLogic = (forceReload: boolean = false): void => {\n        this.getActiveMatchingSurveys((surveys) => {\n            const nonAPISurveys = surveys.filter((survey) => survey.type !== SurveyType.API)\n\n            // Create a queue of surveys sorted by their appearance delay.  We will evaluate the display logic\n            // for each survey in the queue in order, and only display one survey at a time.\n            const nonAPISurveyQueue = this._sortSurveysByAppearanceDelay(nonAPISurveys)\n\n            // Keep track of surveys processed this cycle to remove listeners for inactive ones\n            const activeSelectorSurveyIds = new Set<string>()\n\n            nonAPISurveyQueue.forEach((survey) => {\n                // Widget Type Logic\n                if (survey.type === SurveyType.Widget) {\n                    if (survey.appearance?.widgetType === SurveyWidgetType.Tab) {\n                        // Render tab widget if not already present\n                        this._handleWidget(survey)\n                    } else if (\n                        survey.appearance?.widgetType === SurveyWidgetType.Selector &&\n                        survey.appearance?.widgetSelector\n                    ) {\n                        activeSelectorSurveyIds.add(survey.id)\n                        // Manage the listener attachment/detachment dynamically\n                        this._manageWidgetSelectorListener(survey)\n                    }\n                }\n\n                // Popover Type Logic (only one shown at a time)\n                if (isNull(this._surveyInFocus) && survey.type === SurveyType.Popover) {\n                    this._handlePopoverSurvey(survey)\n                }\n            })\n\n            // Clean up listeners for surveys that are no longer active or matched\n            this._widgetSelectorListeners.forEach((_, surveyId) => {\n                if (!activeSelectorSurveyIds.has(surveyId)) {\n                    this._removeWidgetSelectorListener(surveyId)\n                }\n            })\n        }, forceReload)\n    }\n\n    private _addSurveyToFocus = (id: string): void => {\n        if (!isNull(this._surveyInFocus)) {\n            logger.error(`Survey ${[...this._surveyInFocus]} already in focus. Cannot add survey ${id}.`)\n        }\n        this._surveyInFocus = id\n    }\n\n    private _removeSurveyFromFocus = (id: string): void => {\n        if (this._surveyInFocus !== id) {\n            logger.error(`Survey ${id} is not in focus. Cannot remove survey ${id}.`)\n        }\n        this._clearSurveyTimeout(id)\n        this._surveyInFocus = null\n    }\n\n    // Expose internal state and methods for testing\n    public getTestAPI() {\n        return {\n            addSurveyToFocus: this._addSurveyToFocus,\n            removeSurveyFromFocus: this._removeSurveyFromFocus,\n            surveyInFocus: this._surveyInFocus,\n            surveyTimeouts: this._surveyTimeouts,\n            handleWidget: this._handleWidget,\n            handlePopoverSurvey: this._handlePopoverSurvey,\n            manageWidgetSelectorListener: this._manageWidgetSelectorListener,\n            sortSurveysByAppearanceDelay: this._sortSurveysByAppearanceDelay,\n            checkFlags: this._checkFlags.bind(this),\n        }\n    }\n}\n\nexport const renderSurveysPreview = ({\n    survey,\n    parentElement,\n    previewPageIndex,\n    forceDisableHtml,\n    onPreviewSubmit,\n    posthog,\n}: {\n    survey: Survey\n    parentElement: HTMLElement\n    previewPageIndex: number\n    forceDisableHtml?: boolean\n    onPreviewSubmit?: (res: string | string[] | number | null) => void\n    posthog?: PostHog\n}) => {\n    const stylesheetContent = style(survey.appearance)\n    const stylesheet = prepareStylesheet(document, stylesheetContent, posthog)\n\n    // Remove previously attached <style>\n    Array.from(parentElement.children).forEach((child) => {\n        if (child instanceof HTMLStyleElement) {\n            parentElement.removeChild(child)\n        }\n    })\n\n    if (stylesheet) {\n        parentElement.appendChild(stylesheet)\n    }\n\n    const textColor = getContrastingTextColor(\n        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor || 'white'\n    )\n\n    Preact.render(\n        <SurveyPopup\n            key=\"surveys-render-preview\"\n            survey={survey}\n            forceDisableHtml={forceDisableHtml}\n            style={{\n                position: 'relative',\n                right: 0,\n                borderBottom: `1px solid ${survey.appearance?.borderColor}`,\n                borderRadius: 10,\n                color: textColor,\n            }}\n            onPreviewSubmit={onPreviewSubmit}\n            previewPageIndex={previewPageIndex}\n            removeSurveyFromFocus={() => {}}\n        />,\n        parentElement\n    )\n}\n\nexport const renderFeedbackWidgetPreview = ({\n    survey,\n    root,\n    forceDisableHtml,\n    posthog,\n}: {\n    survey: Survey\n    root: HTMLElement\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n}) => {\n    const stylesheet = createWidgetStylesheet(posthog)\n    if (stylesheet) {\n        root.appendChild(stylesheet)\n    }\n\n    Preact.render(\n        <FeedbackWidget\n            key={'feedback-render-preview'}\n            forceDisableHtml={forceDisableHtml}\n            survey={survey}\n            readOnly={true}\n            removeSurveyFromFocus={() => {}}\n        />,\n        root\n    )\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n\n    const surveyManager = new SurveyManager(posthog)\n    surveyManager.callSurveysAndEvaluateDisplayLogic(true)\n\n    // recalculate surveys every second to check if URL or selectors have changed\n    setInterval(() => {\n        surveyManager.callSurveysAndEvaluateDisplayLogic(false)\n    }, 1000)\n    return surveyManager\n}\n\ntype UseHideSurveyOnURLChangeProps = {\n    survey: Pick<Survey, 'id' | 'conditions' | 'type' | 'appearance'>\n    removeSurveyFromFocus: (id: string) => void\n    setSurveyVisible: (visible: boolean) => void\n    isPreviewMode?: boolean\n}\n\n/**\n * This hook handles URL-based survey visibility after the initial mount.\n * The initial URL check is handled by the `getActiveMatchingSurveys` method in  the `PostHogSurveys` class,\n * which ensures the URL matches before displaying a survey for the first time.\n * That is the method that is called every second to see if there's a matching survey.\n *\n * This separation of concerns means:\n * 1. Initial URL matching is done by `getActiveMatchingSurveys` before displaying the survey\n * 2. Subsequent URL changes are handled here to hide the survey as the user navigates\n */\nexport function useHideSurveyOnURLChange({\n    survey,\n    removeSurveyFromFocus,\n    setSurveyVisible,\n    isPreviewMode = false,\n}: UseHideSurveyOnURLChangeProps) {\n    useEffect(() => {\n        if (isPreviewMode || !survey.conditions?.url) {\n            return\n        }\n\n        const checkUrlMatch = () => {\n            const isSurveyTypeWidget = survey.type === SurveyType.Widget\n            const doesSurveyMatchUrlCondition = doesSurveyUrlMatch(survey)\n            const isSurveyWidgetTypeTab = survey.appearance?.widgetType === SurveyWidgetType.Tab && isSurveyTypeWidget\n\n            if (doesSurveyMatchUrlCondition) {\n                if (isSurveyWidgetTypeTab) {\n                    logger.info(`Showing survey ${survey.id} because it is a feedback button tab and URL matches`)\n                    setSurveyVisible(true)\n                }\n                return\n            }\n\n            logger.info(`Hiding survey ${survey.id} because URL does not match`)\n            setSurveyVisible(false)\n            return removeSurveyFromFocus(survey.id)\n        }\n\n        // Listen for browser back/forward browser history changes\n        addEventListener(window, 'popstate', checkUrlMatch)\n        // Listen for hash changes, for SPA frameworks that use hash-based routing\n        // The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).\n        addEventListener(window, 'hashchange', checkUrlMatch)\n\n        // Listen for SPA navigation\n        const originalPushState = window.history.pushState\n        const originalReplaceState = window.history.replaceState\n\n        window.history.pushState = function (...args) {\n            originalPushState.apply(this, args)\n            checkUrlMatch()\n        }\n\n        window.history.replaceState = function (...args) {\n            originalReplaceState.apply(this, args)\n            checkUrlMatch()\n        }\n\n        return () => {\n            window.removeEventListener('popstate', checkUrlMatch)\n            window.removeEventListener('hashchange', checkUrlMatch)\n            window.history.pushState = originalPushState\n            window.history.replaceState = originalReplaceState\n        }\n    }, [isPreviewMode, survey, removeSurveyFromFocus, setSurveyVisible])\n}\n\nexport function usePopupVisibility(\n    survey: Survey,\n    posthog: PostHog | undefined,\n    millisecondDelay: number,\n    isPreviewMode: boolean,\n    removeSurveyFromFocus: (id: string) => void\n) {\n    const [isPopupVisible, setIsPopupVisible] = useState(isPreviewMode || millisecondDelay === 0)\n    const [isSurveySent, setIsSurveySent] = useState(false)\n\n    useEffect(() => {\n        if (!posthog) {\n            logger.error('usePopupVisibility hook called without a PostHog instance.')\n            return\n        }\n        if (isPreviewMode) {\n            return\n        }\n\n        const handleSurveyClosed = (event: CustomEvent) => {\n            if (event.detail.surveyId !== survey.id) {\n                return\n            }\n            removeSurveyFromFocus(survey.id)\n            setIsPopupVisible(false)\n        }\n\n        const handleSurveySent = (event: CustomEvent) => {\n            if (event.detail.surveyId !== survey.id) {\n                return\n            }\n            if (!survey.appearance?.displayThankYouMessage) {\n                removeSurveyFromFocus(survey.id)\n                setIsPopupVisible(false)\n            } else {\n                setIsSurveySent(true)\n                removeSurveyFromFocus(survey.id)\n                if (survey.appearance?.autoDisappear) {\n                    setTimeout(() => {\n                        setIsPopupVisible(false)\n                    }, 5000)\n                }\n            }\n        }\n\n        const showSurvey = () => {\n            // check if the url is still matching, necessary for delayed surveys, as the URL may have changed\n            if (!doesSurveyUrlMatch(survey)) {\n                return\n            }\n\n            setIsPopupVisible(true)\n            window.dispatchEvent(new Event('PHSurveyShown'))\n            posthog.capture('survey shown', {\n                $survey_name: survey.name,\n                $survey_id: survey.id,\n                $survey_iteration: survey.current_iteration,\n                $survey_iteration_start_date: survey.current_iteration_start_date,\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n            })\n            localStorage.setItem('lastSeenSurveyDate', new Date().toISOString())\n            setTimeout(() => {\n                const inputField = document\n                    .querySelector(getSurveyContainerClass(survey, true))\n                    ?.shadowRoot?.querySelector('textarea') as HTMLElement\n                if (inputField) {\n                    inputField.focus()\n                }\n            }, 100)\n        }\n\n        addEventListener(window, 'PHSurveyClosed', handleSurveyClosed as EventListener)\n        addEventListener(window, 'PHSurveySent', handleSurveySent as EventListener)\n\n        if (millisecondDelay > 0) {\n            // This path is only used for direct usage of SurveyPopup,\n            // not for surveys managed by SurveyManager\n            const timeoutId = setTimeout(showSurvey, millisecondDelay)\n            return () => {\n                clearTimeout(timeoutId)\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed as EventListener)\n                window.removeEventListener('PHSurveySent', handleSurveySent as EventListener)\n            }\n        } else {\n            // This is the path used for surveys managed by SurveyManager\n            showSurvey()\n            return () => {\n                window.removeEventListener('PHSurveyClosed', handleSurveyClosed as EventListener)\n                window.removeEventListener('PHSurveySent', handleSurveySent as EventListener)\n            }\n        }\n    }, [])\n\n    useHideSurveyOnURLChange({\n        survey,\n        removeSurveyFromFocus,\n        setSurveyVisible: setIsPopupVisible,\n        isPreviewMode,\n    })\n\n    return { isPopupVisible, isSurveySent, setIsPopupVisible }\n}\n\ninterface SurveyPopupProps {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    style?: React.CSSProperties\n    previewPageIndex?: number | undefined\n    removeSurveyFromFocus: (id: string) => void\n    isPopup?: boolean\n    onPreviewSubmit?: (res: string | string[] | number | null) => void\n    onPopupSurveyDismissed?: () => void\n    onCloseConfirmationMessage?: () => void\n}\n\nexport function SurveyPopup({\n    survey,\n    forceDisableHtml,\n    posthog,\n    style,\n    previewPageIndex,\n    removeSurveyFromFocus,\n    isPopup = true,\n    onPreviewSubmit = () => {},\n    onPopupSurveyDismissed = () => {},\n    onCloseConfirmationMessage = () => {},\n}: SurveyPopupProps) {\n    const isPreviewMode = Number.isInteger(previewPageIndex)\n    // NB: The client-side code passes the millisecondDelay in seconds, but setTimeout expects milliseconds, so we multiply by 1000\n    const surveyPopupDelayMilliseconds = survey.appearance?.surveyPopupDelaySeconds\n        ? survey.appearance.surveyPopupDelaySeconds * 1000\n        : 0\n    const { isPopupVisible, isSurveySent, setIsPopupVisible } = usePopupVisibility(\n        survey,\n        posthog,\n        surveyPopupDelayMilliseconds,\n        isPreviewMode,\n        removeSurveyFromFocus\n    )\n    const shouldShowConfirmation = isSurveySent || previewPageIndex === survey.questions.length\n    const confirmationBoxLeftStyle = style?.left && isNumber(style?.left) ? { left: style.left - 40 } : {}\n\n    const surveyContextValue = useMemo(() => {\n        const getInProgressSurvey = getInProgressSurveyState(survey)\n        return {\n            isPreviewMode,\n            previewPageIndex: previewPageIndex,\n            onPopupSurveyDismissed: () => {\n                dismissedSurveyEvent(survey, posthog, isPreviewMode)\n                onPopupSurveyDismissed()\n            },\n            isPopup: isPopup || false,\n            surveySubmissionId: getInProgressSurvey?.surveySubmissionId || uuidv7(),\n            onPreviewSubmit,\n        }\n    }, [isPreviewMode, previewPageIndex, isPopup, posthog, survey, onPopupSurveyDismissed, onPreviewSubmit])\n\n    if (isPreviewMode) {\n        style = style || {}\n        style.left = 'unset'\n        style.right = 'unset'\n        style.transform = 'unset'\n    }\n\n    return isPopupVisible ? (\n        <SurveyContext.Provider value={surveyContextValue}>\n            {!shouldShowConfirmation ? (\n                <Questions\n                    survey={survey}\n                    forceDisableHtml={!!forceDisableHtml}\n                    posthog={posthog}\n                    styleOverrides={style}\n                />\n            ) : (\n                <ConfirmationMessage\n                    header={survey.appearance?.thankYouMessageHeader || 'Thank you!'}\n                    description={survey.appearance?.thankYouMessageDescription || ''}\n                    forceDisableHtml={!!forceDisableHtml}\n                    contentType={survey.appearance?.thankYouMessageDescriptionContentType}\n                    appearance={survey.appearance || defaultSurveyAppearance}\n                    styleOverrides={{ ...style, ...confirmationBoxLeftStyle }}\n                    onClose={() => {\n                        setIsPopupVisible(false)\n                        onCloseConfirmationMessage()\n                    }}\n                />\n            )}\n        </SurveyContext.Provider>\n    ) : null\n}\n\nexport function Questions({\n    survey,\n    forceDisableHtml,\n    posthog,\n    styleOverrides,\n}: {\n    survey: Survey\n    forceDisableHtml: boolean\n    posthog?: PostHog\n    styleOverrides?: React.CSSProperties\n}) {\n    const textColor = getContrastingTextColor(\n        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor\n    )\n    // Initialize responses from localStorage or empty object\n    const [questionsResponses, setQuestionsResponses] = useState(() => {\n        const inProgressSurveyData = getInProgressSurveyState(survey)\n        if (inProgressSurveyData?.responses) {\n            logger.info('Survey is already in progress, filling in initial responses')\n        }\n        return inProgressSurveyData?.responses || {}\n    })\n    const { previewPageIndex, onPopupSurveyDismissed, isPopup, onPreviewSubmit, surveySubmissionId } =\n        useContext(SurveyContext)\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(() => {\n        const inProgressSurveyData = getInProgressSurveyState(survey)\n        return previewPageIndex || inProgressSurveyData?.lastQuestionIndex || 0\n    })\n    const surveyQuestions = useMemo(() => getDisplayOrderQuestions(survey), [survey])\n\n    // Sync preview state\n    useEffect(() => {\n        if (previewPageIndex) {\n            setCurrentQuestionIndex(previewPageIndex)\n        }\n    }, [previewPageIndex])\n\n    const onNextButtonClick = ({\n        res,\n        displayQuestionIndex,\n        questionId,\n    }: {\n        res: string | string[] | number | null\n        displayQuestionIndex: number\n        questionId?: string\n    }) => {\n        if (!posthog) {\n            logger.error('onNextButtonClick called without a PostHog instance.')\n            return\n        }\n\n        if (!questionId) {\n            logger.error('onNextButtonClick called without a questionId.')\n            return\n        }\n\n        const responseKey = getSurveyResponseKey(questionId)\n\n        const newResponses = { ...questionsResponses, [responseKey]: res }\n        setQuestionsResponses(newResponses)\n\n        const nextStep = getNextSurveyStep(survey, displayQuestionIndex, res)\n        const isSurveyCompleted = nextStep === SurveyQuestionBranchingType.End\n\n        if (!isSurveyCompleted) {\n            setCurrentQuestionIndex(nextStep)\n            setInProgressSurveyState(survey, {\n                surveySubmissionId: surveySubmissionId,\n                responses: newResponses,\n                lastQuestionIndex: nextStep,\n            })\n        }\n\n        // If partial responses are enabled, send the survey sent event with with the responses,\n        // otherwise only send the event when the survey is completed\n        if (survey.enable_partial_responses || isSurveyCompleted) {\n            sendSurveyEvent({\n                responses: newResponses,\n                survey,\n                surveySubmissionId,\n                isSurveyCompleted,\n                posthog,\n            })\n        }\n    }\n\n    const currentQuestion = surveyQuestions.at(currentQuestionIndex)\n\n    if (!currentQuestion) {\n        return null\n    }\n\n    return (\n        <form\n            className=\"survey-form\"\n            name=\"surveyForm\"\n            style={\n                isPopup\n                    ? {\n                          color: textColor,\n                          borderColor: survey.appearance?.borderColor,\n                          ...styleOverrides,\n                      }\n                    : {}\n            }\n        >\n            {isPopup && (\n                <Cancel\n                    onClick={() => {\n                        onPopupSurveyDismissed()\n                    }}\n                />\n            )}\n\n            <div\n                className=\"survey-box\"\n                style={\n                    isPopup\n                        ? {\n                              backgroundColor:\n                                  survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor,\n                          }\n                        : {}\n                }\n            >\n                {getQuestionComponent({\n                    question: currentQuestion,\n                    forceDisableHtml,\n                    displayQuestionIndex: currentQuestionIndex,\n                    appearance: survey.appearance || defaultSurveyAppearance,\n                    onSubmit: (res) =>\n                        onNextButtonClick({\n                            res,\n                            displayQuestionIndex: currentQuestionIndex,\n                            questionId: currentQuestion.id,\n                        }),\n                    onPreviewSubmit,\n                    initialValue: currentQuestion.id\n                        ? questionsResponses[getSurveyResponseKey(currentQuestion.id)]\n                        : undefined,\n                })}\n            </div>\n        </form>\n    )\n}\n\nexport function FeedbackWidget({\n    survey,\n    forceDisableHtml,\n    posthog,\n    readOnly,\n    removeSurveyFromFocus,\n}: {\n    survey: Survey\n    forceDisableHtml?: boolean\n    posthog?: PostHog\n    readOnly?: boolean\n    removeSurveyFromFocus: (id: string) => void\n}): JSX.Element | null {\n    const [isFeedbackButtonVisible, setIsFeedbackButtonVisible] = useState(true)\n    const [showSurvey, setShowSurvey] = useState(false)\n    const [styleOverrides, setStyleOverrides] = useState<React.CSSProperties>({})\n\n    useEffect(() => {\n        if (!posthog) {\n            logger.error('FeedbackWidget called without a PostHog instance.')\n            return\n        }\n        if (readOnly) {\n            return\n        }\n\n        if (survey.appearance?.widgetType === 'tab') {\n            setStyleOverrides({\n                top: '50%',\n                bottom: 'auto',\n                borderRadius: 10,\n                borderBottom: `1.5px solid ${survey.appearance?.borderColor || '#c9c6c6'}`,\n            })\n        }\n        const handleShowSurvey = (event: Event) => {\n            const customEvent = event as CustomEvent\n            // Check if the event is for this specific survey instance\n            if (customEvent.detail?.surveyId === survey.id) {\n                logger.info(`Received show event for feedback button survey ${survey.id}`)\n                setStyleOverrides(customEvent.detail.position || {})\n                setShowSurvey(true) // Show the survey popup\n            }\n        }\n\n        addEventListener(window, DISPATCH_FEEDBACK_WIDGET_EVENT, handleShowSurvey)\n\n        // Cleanup listener on component unmount\n        return () => {\n            window.removeEventListener(DISPATCH_FEEDBACK_WIDGET_EVENT, handleShowSurvey)\n        }\n    }, [\n        posthog,\n        readOnly,\n        survey.id,\n        survey.appearance?.widgetType,\n        survey.appearance?.widgetSelector,\n        survey.appearance?.borderColor,\n    ])\n\n    useHideSurveyOnURLChange({\n        survey,\n        removeSurveyFromFocus,\n        setSurveyVisible: setIsFeedbackButtonVisible,\n    })\n\n    if (!isFeedbackButtonVisible) {\n        return null\n    }\n\n    const resetShowSurvey = () => {\n        setShowSurvey(false)\n    }\n\n    return (\n        <Preact.Fragment>\n            {survey.appearance?.widgetType === 'tab' && (\n                <div className=\"ph-survey-widget-tab\" onClick={() => !readOnly && setShowSurvey(!showSurvey)}>\n                    {survey.appearance?.widgetLabel || ''}\n                </div>\n            )}\n            {showSurvey && (\n                <SurveyPopup\n                    key={'feedback-widget-survey'}\n                    posthog={posthog}\n                    survey={survey}\n                    forceDisableHtml={forceDisableHtml}\n                    style={styleOverrides}\n                    removeSurveyFromFocus={removeSurveyFromFocus}\n                    onPopupSurveyDismissed={resetShowSurvey}\n                    onCloseConfirmationMessage={resetShowSurvey}\n                />\n            )}\n        </Preact.Fragment>\n    )\n}\n\ninterface GetQuestionComponentProps extends CommonQuestionProps {\n    question: SurveyQuestion\n    displayQuestionIndex: number\n}\n\nconst getQuestionComponent = ({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: GetQuestionComponentProps): JSX.Element => {\n    const questionComponents = {\n        [SurveyQuestionType.Open]: OpenTextQuestion,\n        [SurveyQuestionType.Link]: LinkQuestion,\n        [SurveyQuestionType.Rating]: RatingQuestion,\n        [SurveyQuestionType.SingleChoice]: MultipleChoiceQuestion,\n        [SurveyQuestionType.MultipleChoice]: MultipleChoiceQuestion,\n    }\n\n    const commonProps = {\n        question,\n        forceDisableHtml,\n        appearance,\n        onPreviewSubmit: (res: string | string[] | number | null) => {\n            onPreviewSubmit(res)\n        },\n        onSubmit: (res: string | string[] | number | null) => {\n            onSubmit(res)\n        },\n        initialValue,\n    }\n\n    const additionalProps: Record<SurveyQuestionType, any> = {\n        [SurveyQuestionType.Open]: {},\n        [SurveyQuestionType.Link]: {},\n        [SurveyQuestionType.Rating]: { displayQuestionIndex },\n        [SurveyQuestionType.SingleChoice]: { displayQuestionIndex },\n        [SurveyQuestionType.MultipleChoice]: { displayQuestionIndex },\n    }\n\n    const Component = questionComponents[question.type]\n    const componentProps = { ...commonProps, ...additionalProps[question.type] }\n\n    return <Component {...componentProps} key={question.id} />\n}\n","import { generateSurveys } from '../extensions/surveys'\n\nimport { canActivateRepeatedly } from '../extensions/surveys/surveys-extension-utils'\nimport { assignableWindow } from '../utils/globals'\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.canActivateRepeatedly = canActivateRepeatedly\nassignableWindow.__PosthogExtensions__.generateSurveys = generateSurveys\n\n// this used to be directly on window, but we moved it to __PosthogExtensions__\n// it is still on window for backwards compatibility\nassignableWindow.extendPostHogWithSurveys = generateSurveys\n\nexport default generateSurveys\n"],"names":["EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","__u","currentIndex","currentComponent","previousComponent","prevRaf","currentHook","afterPaintEffects","EMPTY","oldBeforeDiff","options","__b","oldBeforeRender","__r","oldAfterDiff","diffed","oldCommit","__c","oldBeforeUnmount","unmount","getHookState","index","type","__h","hooks","__H","__","length","push","__V","useState","initialState","useReducer","reducer","init","hookState","_reducer","invokeOrReturn","undefined","n","currentValue","__N","nextValue","action","setState","_hasScuFromHooks","updateHookState","f","p","s","c","stateHooks","filter","x","every","prevScu","call","this","shouldUpdate","forEach","hookItem","props","shouldComponentUpdate","prevCWU","componentWillUpdate","__e","tmp","useEffect","callback","args","state","__s","argsChanged","_pendingArgs","useMemo","factory","useContext","context","provider","sub","value","flushAfterPaintEffects","component","shift","__P","invokeCleanup","invokeEffect","e","__v","vnode","t","requestAnimationFrame","afterNextFrame","commitQueue","some","cb","hasErrored","SurveyWidgetType","SurveyPosition","SurveyType","SurveyQuestionType","SurveyQuestionBranchingType","SurveySchedule","HAS_RAF","raf","done","clearTimeout","timeout","cancelAnimationFrame","setTimeout","hook","comp","cleanup","oldArgs","newArgs","arg","win","window","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","Compression","userAgent","assignableWindow","nativeIsArray","Array","isArray","toString","Object","prototype","obj","isUndefined","isString","isNull","isNullish","isNumber","_createLogger","prefix","logger","_log","level","console","consoleLog","_len","arguments","_key","info","_len2","_key2","warn","_len3","_key3","error","_len4","_key4","critical","_len5","_key5","uninitializedWarning","methodName","createLogger","additionalPrefix","addEventListener","element","event","capture","passive","SURVEY_LOGGER","SURVEY_SEEN_PREFIX","SURVEY_IN_PROGRESS_PREFIX","Math","trunc","v","ceil","floor","Number","isInteger","isFinite","DIGITS","UUID","constructor","bytes","TypeError","fromFieldsV7","unixTsMs","randA","randBHi","randBLo","RangeError","Uint8Array","pow","text","i","charAt","Error","clone","slice","equals","other","compareTo","diff","sign","V7Generator","_timestamp","_counter","_random","DefaultRandom","generate","generateOrAbort","valueAfterReset","ts","Date","now","_resetCounter","nextUint32","defaultGenerator","getRandomValues","buffer","UUIDV7_DENY_WEAK_RNG","random","crypto","_buffer","Uint32Array","_cursor","Infinity","uuidv7","uuidv7obj","prepareStylesheet","innerText","posthog","_posthog$config","stylesheet","createElement","config","prepare_external_dependency_stylesheet","isMatchingRegex","pattern","str","RegExp","_unused","isValidRegex","test","_unused2","MOBILE","ANDROID","TABLET","ANDROID_TABLET","IPAD","APPLE_WATCH","APPLE","BLACKBERRY","NINTENDO","PLAYSTATION","XBOX","WINDOWS_PHONE","WINDOWS","NOKIA","OUYA","GENERIC","GENERIC_MOBILE","toLowerCase","GENERIC_TABLET","XBOX_REGEX","PLAYSTATION_REGEX","NINTENDO_REGEX","BLACKBERRY_REGEX","detectDeviceType","user_agent","device","detectDevice","_window","_document","getFontFamily","fontFamily","defaultFontStack","getSurveyResponseKey","questionId","defaultSurveyAppearance","backgroundColor","submitButtonColor","submitButtonTextColor","ratingButtonColor","ratingButtonActiveColor","borderColor","placeholder","whiteLabel","displayThankYouMessage","thankYouMessageHeader","position","Right","widgetColor","zIndex","disabledButtonOpacity","maxWidth","style","appearance","positions","Left","Center","NextToTrigger","getContrastingTextColor","replace","trim","hex2rgb","hexColor","parseInt","color","rgb","startsWith","nameColorToHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","colorMatch","match","r","g","b","sqrt","getSurveyResponseValue","responses","response","sendSurveyEvent","_ref","survey","surveySubmissionId","isSurveyCompleted","localStorage","setItem","getSurveySeenKey","_extends","$survey_name","name","$survey_id","id","$survey_iteration","current_iteration","$survey_iteration_start_date","current_iteration_start_date","$survey_questions","questions","map","question","$survey_submission_id","$survey_completed","sessionRecordingUrl","get_session_replay_url","$set","getSurveyInteractionProperty","dispatchEvent","CustomEvent","detail","surveyId","clearInProgressSurveyState","dismissedSurveyEvent","readOnly","inProgressSurvey","getInProgressSurveyState","$survey_partially_completed","values","resp","shuffle","array","a","sort","reverseIfUnshuffled","unshuffled","shuffled","val","reverse","getDisplayOrderQuestions","shuffleQuestions","enable_partial_responses","canActivateRepeatedly","_survey$conditions3","_survey$conditions3$e","conditions","events","repeatedActivation","_survey$conditions","_survey$conditions$ev","_survey$conditions$ev2","_survey$conditions2","_survey$conditions2$e","_survey$conditions2$e2","hasEvents","schedule","Always","isSurveyInProgress","surveySeenKey","surveyProperty","SurveyContext","createContext","isPreviewMode","previewPageIndex","onPopupSurveyDismissed","isPopup","onPreviewSubmit","renderChildrenAsTextOrHtml","_ref2","children","renderAsHtml","cloneElement","dangerouslySetInnerHTML","__html","surveyValidationMap","icontains","targets","target","includes","not_icontains","regex","not_regex","exact","is_not","defaultMatchType","matchType","doesSurveyUrlMatch","_survey$conditions4","_window$location","_survey$conditions5","url","href","urlMatchType","getInProgressSurveyStateKey","key","setInProgressSurveyState","JSON","stringify","stateString","getItem","parse","removeItem","getSurveyContainerClass","asSelector","className","retrieveWidgetShadow","widgetClassName","existingDiv","querySelector","shadowRoot","effectiveAppearance","hostStyle","div","setProperty","shadow","attachShadow","mode","widgetStyles","createWidgetStylesheet","appendChild","body","satisfiedEmoji","_jsx","xmlns","height","viewBox","width","d","neutralEmoji","dissatisfiedEmoji","veryDissatisfiedEmoji","verySatisfiedEmoji","cancelSVG","fill","IconPosthogLogo","_jsxs","maskType","maskUnits","y","mask","transform","checkSVG","PostHogLogo","rel","BottomSection","submitDisabled","onSubmit","link","textColor","disabled","onClick","open","QuestionHeader","description","descriptionContentType","forceDisableHtml","h","Cancel","ConfirmationMessage","header","contentType","onClose","styleOverrides","thankYouMessageCloseButtonText","OpenTextQuestion","initialValue","setText","Fragment","rows","onInput","currentTarget","stopPropagation","onKeyDown","buttonText","optional","LinkQuestion","RatingQuestion","_ref3","displayQuestionIndex","scale","starting","rating","setRating","display","threeScaleEmojis","fiveScaleEmojis","emoji","idx","active","gridTemplateColumns","getScaleNumbers","number","RatingButton","num","setActiveNumber","lowerBoundLabel","upperBoundLabel","submitButtonText","_ref4","isSubmitDisabled","selectedChoices","openChoiceSelected","openEndedInput","MultipleChoiceQuestion","_ref5","openChoiceInputRef","useRef","current","choices","shuffleOptions","displayOrderChoices","openEndedChoice","hasOpenChoice","pop","shuffledOptions","getDisplayOrderChoices","setSelectedChoices","SingleChoice","setOpenChoiceSelected","choice","setOpenEndedInput","find","inputType","handleChoiceChange","isOpenChoice","_openChoiceInputRef$c","focus","MultipleChoice","choiceClass","isChecked","checked","htmlFor","_Fragment","ref","handleOpenEndedInputChange","fiveScaleNumbers","sevenScaleNumbers","tenScaleNumbers","DISPATCH_FEEDBACK_WIDGET_EVENT","getNextSurveyStep","currentQuestionIndex","_question$branching","nextQuestionIndex","branching","End","SpecificQuestion","ResponseBased","_question$branching2","_question$branching2$","selectedChoiceIndex","indexOf","responseValues","hasOwnProperty","nextStep","Rating","_question$branching3","_question$branching3$","ratingBucket","responseValue","getRatingBucketForResponseValue","SurveyManager","_this","_surveyTimeouts","Map","_widgetSelectorListeners","_handlePopoverSurvey","surveyWaitPeriodInDays","seenSurveyWaitPeriodInDays","hasWaitPeriodPassed","lastSeenSurveyDate","waitPeriodInDays","today","abs","getTime","surveySeen","getSurveySeen","_survey$appearance","_clearSurveyTimeout","_addSurveyToFocus","delaySeconds","surveyPopupDelaySeconds","createShadow","styleSheet","styleElement","_posthog","Preact","SurveyPopup","removeSurveyFromFocus","_removeSurveyFromFocus","timeoutId","set","_handleWidget","stylesheetContent","WIDGET_STYLE_ID","setAttribute","FeedbackWidget","_removeWidgetSelectorListener","existing","get","removeEventListener","listener","removeAttribute","delete","_manageWidgetSelectorListener","_survey$appearance2","selector","widgetSelector","currentElement","existingListenerData","hasAttribute","_survey$appearance3","_survey$appearance4","_survey$appearance5","buttonRect","getBoundingClientRect","viewportHeight","innerHeight","viewportWidth","innerWidth","surveyWidth","left","spaceBelow","bottom","spaceAbove","top","showAbove","positionStyles","right","boxShadow","borderBottom","borderRadius","renderSurvey","getActiveMatchingSurveys","forceReload","_this$_posthog","surveys","getSurveys","targetingMatchedSurveys","checkSurveyEligibility","eligible","_isSurveyConditionMatched","_hasActionOrEventTriggeredSurvey","_checkFlags","callSurveysAndEvaluateDisplayLogic","nonAPISurveys","API","nonAPISurveyQueue","_sortSurveysByAppearanceDelay","activeSelectorSurveyIds","Set","_survey$appearance6","_survey$appearance7","_survey$appearance8","Widget","widgetType","Tab","Selector","add","_surveyInFocus","Popover","_","has","_a$appearance","_b$appearance","isSurveyInProgressA","isSurveyInProgressB","aIsAlways","bIsAlways","_isSurveyFeatureFlagEnabled","flagKey","featureFlags","isFeatureEnabled","_survey$conditions6","_survey$conditions7","_survey$conditions8","deviceTypes","deviceType","deviceTypesMatchType","doesSurveyDeviceTypesMatch","_survey$conditions9","doesSurveyMatchSelector","_internalFlagCheckSatisfied","internal_targeting_flag_key","eligibility","reason","start_date","end_date","isSurveyRunning","linked_flag_key","targeting_flag_key","_this$_posthog$survey","doesSurveyActivateByEvent","_survey$conditions2$a","_survey$conditions2$a2","actions","doesSurveyActivateByAction","surveysActivatedByEventsOrActions","_surveyEventReceiver","_survey$feature_flag_","feature_flag_keys","getTestAPI","addSurveyToFocus","surveyInFocus","surveyTimeouts","handleWidget","handlePopoverSurvey","manageWidgetSelectorListener","sortSurveysByAppearanceDelay","checkFlags","bind","generateSurveys","surveyManager","setInterval","useHideSurveyOnURLChange","setSurveyVisible","checkUrlMatch","_survey$appearance11","isSurveyTypeWidget","doesSurveyMatchUrlCondition","isSurveyWidgetTypeTab","originalPushState","history","pushState","originalReplaceState","replaceState","apply","_survey$appearance14","_style","_style2","_survey$appearance15","_survey$appearance16","_survey$appearance17","onCloseConfirmationMessage","surveyPopupDelayMilliseconds","isPopupVisible","isSurveySent","setIsPopupVisible","millisecondDelay","setIsSurveySent","handleSurveyClosed","handleSurveySent","_survey$appearance12","_survey$appearance13","autoDisappear","showSurvey","Event","toISOString","_document$querySelect","_document$querySelect2","inputField","usePopupVisibility","shouldShowConfirmation","confirmationBoxLeftStyle","surveyContextValue","getInProgressSurvey","Provider","thankYouMessageDescription","thankYouMessageDescriptionContentType","Questions","_ref6","_survey$appearance18","_survey$appearance19","_survey$appearance20","questionsResponses","setQuestionsResponses","inProgressSurveyData","setCurrentQuestionIndex","lastQuestionIndex","surveyQuestions","currentQuestion","at","getQuestionComponent","res","_ref7","responseKey","newResponses","onNextButtonClick","_ref8","_survey$appearance23","_survey$appearance24","_survey$appearance25","_survey$appearance26","_survey$appearance27","isFeedbackButtonVisible","setIsFeedbackButtonVisible","setShowSurvey","setStyleOverrides","_survey$appearance21","_survey$appearance22","handleShowSurvey","_customEvent$detail","customEvent","resetShowSurvey","widgetLabel","_ref9","questionComponents","Open","Link","commonProps","additionalProps","Component","componentProps","_createElement","__PosthogExtensions__","extendPostHogWithSurveys"],"mappings":"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","x_google_ignoreList":[0,1]}